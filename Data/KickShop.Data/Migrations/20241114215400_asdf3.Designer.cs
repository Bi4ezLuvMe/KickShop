// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241114215400_asdf3")]
    partial class asdf3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("71c8003f-0971-41a7-b716-22b0e3d00487"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "/images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("00320467-1903-4d4d-b9b6-7b47a6fa9dff"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "/images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("47967126-feb3-4661-9803-940fae62b166"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "/images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("d0f5a15d-f342-4092-91e1-4c5835e5a58e"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "/images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("cfd27ff1-c8fc-4325-a29f-ea0ac77fb164"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("70cc5518-7e0f-4cba-a4ad-a5b4868ec881"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "/images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("a7fddf9c-74ac-4b8c-bd1e-2a4c77ad1dc2"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("445fe8f9-aa8c-4bf0-8a22-8c9096621dff"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "/images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("12866d4e-ce72-481b-b150-84930935dd94"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("1e15c503-fbb5-4d61-9919-ad5f86df8a82"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("2b37ed62-977b-4140-853d-b0943b7ca34b"),
                            ImageUrl = "/images/Categegories/boxing-gloves.png",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("cfe03cde-9795-4f22-907d-8e17ba926870"),
                            ImageUrl = "/images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("248ab499-276d-4fd6-964a-0f337f410cf9"),
                            ImageUrl = "/images/Categories/shin-guards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("b250c4fd-003c-418a-a172-4e6e3060b14f"),
                            ImageUrl = "/images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("8bb74788-0ac7-4534-9f04-08625c8baa6f"),
                            ImageUrl = "/images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("7ff89137-6779-4c22-8a68-d69c5f529b7a"),
                            ImageUrl = "/images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("55ba0e71-f616-4387-b214-fd73f035d066"),
                            ImageUrl = "/images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("1556377c-8e7c-4337-b870-fa6cd2b21b32"),
                            ImageUrl = "/images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("7983a000-af57-4d17-bcad-0ee6aa729c02"),
                            ImageUrl = "/images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("eee343f0-2c8a-4163-9335-9bbed69fdcad"),
                            ImageUrl = "/images/Categories/protective-equipment.png",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("209af4ae-89e8-40b0-9129-17ca94e00fb2"),
                            BrandId = new Guid("00320467-1903-4d4d-b9b6-7b47a6fa9dff"),
                            CategoryId = new Guid("2b37ed62-977b-4140-853d-b0943b7ca34b"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            Name = "RDX Boxing Gloves",
                            Price = 49.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("60718779-33aa-4e88-8ec9-709e259563db"),
                            BrandId = new Guid("47967126-feb3-4661-9803-940fae62b166"),
                            CategoryId = new Guid("2b37ed62-977b-4140-853d-b0943b7ca34b"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 89.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("22fb6af2-5840-4689-aa43-23932434bf22"),
                            BrandId = new Guid("d0f5a15d-f342-4092-91e1-4c5835e5a58e"),
                            CategoryId = new Guid("2b37ed62-977b-4140-853d-b0943b7ca34b"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            Name = "Venum Challenger Gloves",
                            Price = 39.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("7981f302-b3e9-42b9-a942-92d5b7c1fced"),
                            BrandId = new Guid("70cc5518-7e0f-4cba-a4ad-a5b4868ec881"),
                            CategoryId = new Guid("2b37ed62-977b-4140-853d-b0943b7ca34b"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 59.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("796abb42-932e-4cd2-a455-29fd74172027"),
                            BrandId = new Guid("445fe8f9-aa8c-4bf0-8a22-8c9096621dff"),
                            CategoryId = new Guid("cfe03cde-9795-4f22-907d-8e17ba926870"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 29.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("b5697e77-6dcd-41be-b2cc-5c33e64b3d68"),
                            BrandId = new Guid("12866d4e-ce72-481b-b150-84930935dd94"),
                            CategoryId = new Guid("248ab499-276d-4fd6-964a-0f337f410cf9"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            Name = "Sanabul Essential Shin Guards",
                            Price = 35.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("e6124fde-e8d5-4d73-81c6-56326afcb917"),
                            BrandId = new Guid("1e15c503-fbb5-4d61-9919-ad5f86df8a82"),
                            CategoryId = new Guid("8bb74788-0ac7-4534-9f04-08625c8baa6f"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-1.png",
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("8bfd6821-2671-4c46-b618-2835b1c1166c"),
                            BrandId = new Guid("71c8003f-0971-41a7-b716-22b0e3d00487"),
                            CategoryId = new Guid("b250c4fd-003c-418a-a172-4e6e3060b14f"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("d8b53ea0-1545-4d04-aec7-bdad8881281e"),
                            BrandId = new Guid("a7fddf9c-74ac-4b8c-bd1e-2a4c77ad1dc2"),
                            CategoryId = new Guid("55ba0e71-f616-4387-b214-fd73f035d066"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            Name = "Ringside Punching Bag",
                            Price = 119.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("4cf73507-e2bc-4129-95d7-8fe1c851fb74"),
                            BrandId = new Guid("00320467-1903-4d4d-b9b6-7b47a6fa9dff"),
                            CategoryId = new Guid("7983a000-af57-4d17-bcad-0ee6aa729c02"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-1.png",
                            Name = "RDX Pro Boxing Shoes",
                            Price = 69.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("8e7282a8-2332-4573-bfbc-b140994616ef"),
                            BrandId = new Guid("d0f5a15d-f342-4092-91e1-4c5835e5a58e"),
                            CategoryId = new Guid("248ab499-276d-4fd6-964a-0f337f410cf9"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            Name = "Venum Challenger Shin Guards",
                            Price = 45.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("c16354cd-8b60-44c9-b9b9-f2ad3038d5a4"),
                            BrandId = new Guid("cfd27ff1-c8fc-4325-a29f-ea0ac77fb164"),
                            CategoryId = new Guid("cfe03cde-9795-4f22-907d-8e17ba926870"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 34.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("d83e1861-9146-4dbb-8e08-0e3d7efae4c6"),
                            BrandId = new Guid("70cc5518-7e0f-4cba-a4ad-a5b4868ec881"),
                            CategoryId = new Guid("55ba0e71-f616-4387-b214-fd73f035d066"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            Name = "Title Boxing Double End Bag",
                            Price = 44.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("b60923e1-2179-4852-87d8-d6d8f35db990"),
                            BrandId = new Guid("71c8003f-0971-41a7-b716-22b0e3d00487"),
                            CategoryId = new Guid("8bb74788-0ac7-4534-9f04-08625c8baa6f"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlast-pro-headgear/everlast-headgear-1.png",
                            Name = "Everlast Pro Headgear",
                            Price = 69.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("14a3ba2b-7bfc-474d-bc2b-11b6478778bd"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-1.png",
                            ProductId = new Guid("209af4ae-89e8-40b0-9129-17ca94e00fb2")
                        },
                        new
                        {
                            ImageId = new Guid("6b852767-0636-43a6-a4e8-586e85b4ba23"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-2.png",
                            ProductId = new Guid("209af4ae-89e8-40b0-9129-17ca94e00fb2")
                        },
                        new
                        {
                            ImageId = new Guid("37d505b8-22e7-4506-af7e-06adcc83f58d"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            ProductId = new Guid("209af4ae-89e8-40b0-9129-17ca94e00fb2")
                        },
                        new
                        {
                            ImageId = new Guid("0f3f6662-09ec-425b-bca2-7bbc4562d131"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("60718779-33aa-4e88-8ec9-709e259563db")
                        },
                        new
                        {
                            ImageId = new Guid("44f9bf57-d728-4f1f-84e3-2c8bc4c4614b"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("60718779-33aa-4e88-8ec9-709e259563db")
                        },
                        new
                        {
                            ImageId = new Guid("e11e7d93-c45f-4b38-ab51-87404e7917fe"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("60718779-33aa-4e88-8ec9-709e259563db")
                        },
                        new
                        {
                            ImageId = new Guid("0e220100-bc71-470b-8b80-6be442d518d0"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("22fb6af2-5840-4689-aa43-23932434bf22")
                        },
                        new
                        {
                            ImageId = new Guid("15e95d65-46c6-475a-bab5-b0c2f4587a45"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("22fb6af2-5840-4689-aa43-23932434bf22")
                        },
                        new
                        {
                            ImageId = new Guid("b925ad56-afb7-4059-a0b0-3333a5bcc02b"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("22fb6af2-5840-4689-aa43-23932434bf22")
                        },
                        new
                        {
                            ImageId = new Guid("c7322b7c-6add-4c0c-9682-1be0b037e3ce"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("7981f302-b3e9-42b9-a942-92d5b7c1fced")
                        },
                        new
                        {
                            ImageId = new Guid("194d1019-7c46-4a63-a961-0a08906cda1f"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("7981f302-b3e9-42b9-a942-92d5b7c1fced")
                        },
                        new
                        {
                            ImageId = new Guid("42b0f4c9-edb9-49da-81a8-c17b2f53a7e3"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("7981f302-b3e9-42b9-a942-92d5b7c1fced")
                        },
                        new
                        {
                            ImageId = new Guid("59556a56-ba2e-44b2-bc58-20b787efe5ad"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("796abb42-932e-4cd2-a455-29fd74172027")
                        },
                        new
                        {
                            ImageId = new Guid("1281123e-e425-4686-956b-1eeb26f815a9"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("796abb42-932e-4cd2-a455-29fd74172027")
                        },
                        new
                        {
                            ImageId = new Guid("59e60392-a265-4ab5-9df6-fef6a8734ee7"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("796abb42-932e-4cd2-a455-29fd74172027")
                        },
                        new
                        {
                            ImageId = new Guid("82377d30-b96e-4130-a4d2-682e71762b86"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("b5697e77-6dcd-41be-b2cc-5c33e64b3d68")
                        },
                        new
                        {
                            ImageId = new Guid("d87196c1-138b-4049-8964-f906daa4c68a"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("b5697e77-6dcd-41be-b2cc-5c33e64b3d68")
                        },
                        new
                        {
                            ImageId = new Guid("1e8f783f-2877-4245-9215-61506bdda7a6"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("b5697e77-6dcd-41be-b2cc-5c33e64b3d68")
                        },
                        new
                        {
                            ImageId = new Guid("17f30d46-d164-47db-887e-e7b157928061"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-1.png",
                            ProductId = new Guid("e6124fde-e8d5-4d73-81c6-56326afcb917")
                        },
                        new
                        {
                            ImageId = new Guid("ae86a083-48a6-4aea-a20f-6d5c70ae12a9"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-2.png",
                            ProductId = new Guid("e6124fde-e8d5-4d73-81c6-56326afcb917")
                        },
                        new
                        {
                            ImageId = new Guid("77b1e173-bb46-4936-a37a-6fb2eed50c84"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("e6124fde-e8d5-4d73-81c6-56326afcb917")
                        },
                        new
                        {
                            ImageId = new Guid("254bc3ad-f700-494f-a062-dc06041ff0ad"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("8bfd6821-2671-4c46-b618-2835b1c1166c")
                        },
                        new
                        {
                            ImageId = new Guid("e46f3572-5659-47f7-848a-b782c663e7db"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("8bfd6821-2671-4c46-b618-2835b1c1166c")
                        },
                        new
                        {
                            ImageId = new Guid("5f931152-abfb-4e05-9bd0-56314f731f5c"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("8bfd6821-2671-4c46-b618-2835b1c1166c")
                        },
                        new
                        {
                            ImageId = new Guid("9287156e-c511-421c-9f3e-a598dd92d918"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("d8b53ea0-1545-4d04-aec7-bdad8881281e")
                        },
                        new
                        {
                            ImageId = new Guid("cda371a5-b543-4be3-b30d-5754ba1a4097"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("d8b53ea0-1545-4d04-aec7-bdad8881281e")
                        },
                        new
                        {
                            ImageId = new Guid("4e9b058d-79e7-485c-8d9c-d0fdf4196b9c"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("d8b53ea0-1545-4d04-aec7-bdad8881281e")
                        },
                        new
                        {
                            ImageId = new Guid("dfd4cc07-cab0-4394-ae26-92815cfff4b0"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-1.png",
                            ProductId = new Guid("4cf73507-e2bc-4129-95d7-8fe1c851fb74")
                        },
                        new
                        {
                            ImageId = new Guid("7f57fdfb-8bde-4b19-8752-214979f9a8b9"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-2.png",
                            ProductId = new Guid("4cf73507-e2bc-4129-95d7-8fe1c851fb74")
                        },
                        new
                        {
                            ImageId = new Guid("f02e5a59-9eaa-44d8-9235-26bc5a082932"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-3.png",
                            ProductId = new Guid("4cf73507-e2bc-4129-95d7-8fe1c851fb74")
                        },
                        new
                        {
                            ImageId = new Guid("ec1a0e8f-6fe9-4930-8fe3-7d250fff581a"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("8e7282a8-2332-4573-bfbc-b140994616ef")
                        },
                        new
                        {
                            ImageId = new Guid("86e33e7f-5782-4b0f-a974-a0963efe0841"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("8e7282a8-2332-4573-bfbc-b140994616ef")
                        },
                        new
                        {
                            ImageId = new Guid("afdc9067-4219-49d4-bf7d-9eab23cf6189"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("8e7282a8-2332-4573-bfbc-b140994616ef")
                        },
                        new
                        {
                            ImageId = new Guid("088a4b0d-6a88-4378-92c2-3799887fdb09"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("c16354cd-8b60-44c9-b9b9-f2ad3038d5a4")
                        },
                        new
                        {
                            ImageId = new Guid("a342313a-7205-4b50-b47d-6e8c309bde4d"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("c16354cd-8b60-44c9-b9b9-f2ad3038d5a4")
                        },
                        new
                        {
                            ImageId = new Guid("0ca0672c-be4c-4e8f-b9cc-8b51e4c3b200"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("c16354cd-8b60-44c9-b9b9-f2ad3038d5a4")
                        },
                        new
                        {
                            ImageId = new Guid("31f24caa-f9c6-4c98-a601-9ff67c832ace"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("d83e1861-9146-4dbb-8e08-0e3d7efae4c6")
                        },
                        new
                        {
                            ImageId = new Guid("6bac080b-bdab-4bf6-877d-e27adb854a10"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("d83e1861-9146-4dbb-8e08-0e3d7efae4c6")
                        },
                        new
                        {
                            ImageId = new Guid("2c862a35-9c73-45e9-9316-4263b15956db"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("d83e1861-9146-4dbb-8e08-0e3d7efae4c6")
                        },
                        new
                        {
                            ImageId = new Guid("3d6e5856-e270-4d34-b4be-be0efd14d1f8"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-1.png",
                            ProductId = new Guid("b60923e1-2179-4852-87d8-d6d8f35db990")
                        },
                        new
                        {
                            ImageId = new Guid("7a12680b-6e74-46f2-ac10-62c949753e07"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-2.png",
                            ProductId = new Guid("b60923e1-2179-4852-87d8-d6d8f35db990")
                        },
                        new
                        {
                            ImageId = new Guid("c2ae6044-f5fc-4956-92bc-b2bc21593a60"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-3.png",
                            ProductId = new Guid("b60923e1-2179-4852-87d8-d6d8f35db990")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
