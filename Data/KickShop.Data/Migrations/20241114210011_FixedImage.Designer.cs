// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241114210011_FixedImage")]
    partial class FixedImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("a0c523fa-38a4-4df7-bf77-a9967bcaa77a"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "/images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("5a044fc0-7328-494d-b11f-c07ed1229a59"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "/images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("38532feb-6f94-4bea-84d5-744a0b35af5c"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "/images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("aa4f36b5-1c98-4060-8d62-325adc60f324"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "/images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("5aba4088-59af-47c0-bd33-3fa1aedc6824"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("536f127f-dea8-4ca4-9539-446d1f86daee"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "/images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("ea2375ce-e821-4bd6-a76d-46e751a5b26f"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("7f2a4214-e5b5-4794-aec8-8736e5c22a83"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "/images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("cb03ff7f-6ca9-4efe-b2de-b0ca5be62fc3"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("e52aa911-aa63-498b-8bce-51baab3b5dde"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("835fc42a-2f19-4dc2-be95-be3b82082a40"),
                            ImageUrl = "/images/Categegories/boxing-gloves.png",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("5bde86bf-fe68-48ed-8baf-ddd97501a944"),
                            ImageUrl = "/images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("2a625349-7880-4e8f-ad41-b660a7ebeef7"),
                            ImageUrl = "/images/Categories/shinguards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("5df8dc80-f152-4795-923c-0561b6f85ce5"),
                            ImageUrl = "/images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("c9ccf53a-822b-4c8b-8fef-5422cefb1ef5"),
                            ImageUrl = "/images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("1e1ede8d-3b30-4c64-9043-d7a2bfa9bfcb"),
                            ImageUrl = "/images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("fc5123b5-7e38-4fab-8b8f-71cc9754ed44"),
                            ImageUrl = "/images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("f4c6db4c-d09c-4ba0-ac14-6937de7fade5"),
                            ImageUrl = "/images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("187fe48d-e704-4774-9d76-b2b64323bf7b"),
                            ImageUrl = "/images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("50c08702-a1c9-424a-bc28-68519e6b6a8b"),
                            ImageUrl = "/images/Categories/protective-gear.png",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("bcabe895-6c3e-4930-ad10-b7756981ca39"),
                            BrandId = new Guid("5a044fc0-7328-494d-b11f-c07ed1229a59"),
                            CategoryId = new Guid("835fc42a-2f19-4dc2-be95-be3b82082a40"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            Name = "RDX Boxing Gloves",
                            Price = 49.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("54057643-6224-4fbb-9ec0-8e761c8b068e"),
                            BrandId = new Guid("38532feb-6f94-4bea-84d5-744a0b35af5c"),
                            CategoryId = new Guid("835fc42a-2f19-4dc2-be95-be3b82082a40"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 89.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("385cc09b-aee6-42ef-b767-4cac18dded80"),
                            BrandId = new Guid("aa4f36b5-1c98-4060-8d62-325adc60f324"),
                            CategoryId = new Guid("835fc42a-2f19-4dc2-be95-be3b82082a40"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            Name = "Venum Challenger Gloves",
                            Price = 39.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("ad9e91b8-6144-4f9c-81e3-0559cc5830a1"),
                            BrandId = new Guid("536f127f-dea8-4ca4-9539-446d1f86daee"),
                            CategoryId = new Guid("835fc42a-2f19-4dc2-be95-be3b82082a40"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 59.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("94b05df8-64fd-4976-973d-62362ad7d5e2"),
                            BrandId = new Guid("7f2a4214-e5b5-4794-aec8-8736e5c22a83"),
                            CategoryId = new Guid("5bde86bf-fe68-48ed-8baf-ddd97501a944"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 29.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("f2af4558-e395-4b88-b67f-abb596b9c6d0"),
                            BrandId = new Guid("cb03ff7f-6ca9-4efe-b2de-b0ca5be62fc3"),
                            CategoryId = new Guid("2a625349-7880-4e8f-ad41-b660a7ebeef7"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            Name = "Sanabul Essential Shin Guards",
                            Price = 35.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("29eca57a-81ff-4e3a-9d59-ee215619f628"),
                            BrandId = new Guid("e52aa911-aa63-498b-8bce-51baab3b5dde"),
                            CategoryId = new Guid("c9ccf53a-822b-4c8b-8fef-5422cefb1ef5"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("83fe2b76-bb52-4920-aba8-4c93ddf5a2d0"),
                            BrandId = new Guid("a0c523fa-38a4-4df7-bf77-a9967bcaa77a"),
                            CategoryId = new Guid("5df8dc80-f152-4795-923c-0561b6f85ce5"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("3fa04aac-4923-41a5-ac3a-969fd1394c70"),
                            BrandId = new Guid("ea2375ce-e821-4bd6-a76d-46e751a5b26f"),
                            CategoryId = new Guid("fc5123b5-7e38-4fab-8b8f-71cc9754ed44"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            Name = "Ringside Punching Bag",
                            Price = 119.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("c52f77d5-a6eb-4a53-bc07-c024be560d38"),
                            BrandId = new Guid("5a044fc0-7328-494d-b11f-c07ed1229a59"),
                            CategoryId = new Guid("187fe48d-e704-4774-9d76-b2b64323bf7b"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            Name = "RDX Pro Boxing Shoes",
                            Price = 69.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("a808e4bc-e5bd-4efa-98d5-44393e9102fa"),
                            BrandId = new Guid("aa4f36b5-1c98-4060-8d62-325adc60f324"),
                            CategoryId = new Guid("2a625349-7880-4e8f-ad41-b660a7ebeef7"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            Name = "Venum Challenger Shin Guards",
                            Price = 45.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("91111577-7e3d-4dff-b37a-3310c498065a"),
                            BrandId = new Guid("5aba4088-59af-47c0-bd33-3fa1aedc6824"),
                            CategoryId = new Guid("5bde86bf-fe68-48ed-8baf-ddd97501a944"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 34.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("3121c01c-f7a8-4e98-b20a-7d114d25caeb"),
                            BrandId = new Guid("536f127f-dea8-4ca4-9539-446d1f86daee"),
                            CategoryId = new Guid("fc5123b5-7e38-4fab-8b8f-71cc9754ed44"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            Name = "Title Boxing Double End Bag",
                            Price = 44.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("2ef2c970-b80a-4f78-9792-d17e139bc400"),
                            BrandId = new Guid("a0c523fa-38a4-4df7-bf77-a9967bcaa77a"),
                            CategoryId = new Guid("c9ccf53a-822b-4c8b-8fef-5422cefb1ef5"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            Name = "Everlast Pro Headgear",
                            Price = 69.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("a838ee14-7307-427a-94f4-44d4d3b69942"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-1.png",
                            ProductId = new Guid("bcabe895-6c3e-4930-ad10-b7756981ca39")
                        },
                        new
                        {
                            ImageId = new Guid("cf11227a-ec55-4dd7-9cbc-ccffa6fe22eb"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-2.png",
                            ProductId = new Guid("bcabe895-6c3e-4930-ad10-b7756981ca39")
                        },
                        new
                        {
                            ImageId = new Guid("c74d6d3a-74d8-443c-98c8-de4b8237f55b"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            ProductId = new Guid("bcabe895-6c3e-4930-ad10-b7756981ca39")
                        },
                        new
                        {
                            ImageId = new Guid("6a4d540f-0de5-47a6-b336-f2ca1ec0fd36"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("54057643-6224-4fbb-9ec0-8e761c8b068e")
                        },
                        new
                        {
                            ImageId = new Guid("ac18b2e7-47d6-4a28-9b52-4886dff937f0"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("54057643-6224-4fbb-9ec0-8e761c8b068e")
                        },
                        new
                        {
                            ImageId = new Guid("ae7ed184-6c82-44dc-8128-24cfae1cf8c6"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("54057643-6224-4fbb-9ec0-8e761c8b068e")
                        },
                        new
                        {
                            ImageId = new Guid("1eccf3d8-05c2-445e-81de-83f5294ec9be"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("385cc09b-aee6-42ef-b767-4cac18dded80")
                        },
                        new
                        {
                            ImageId = new Guid("4d5a85e7-b682-425f-8e46-b5c693395a16"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("385cc09b-aee6-42ef-b767-4cac18dded80")
                        },
                        new
                        {
                            ImageId = new Guid("acc55ab9-3389-4c44-bbbf-84812a710cd7"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("385cc09b-aee6-42ef-b767-4cac18dded80")
                        },
                        new
                        {
                            ImageId = new Guid("96215abe-fb99-46e2-b416-f2824e85d7bd"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("ad9e91b8-6144-4f9c-81e3-0559cc5830a1")
                        },
                        new
                        {
                            ImageId = new Guid("b1d420d2-aabd-4cb6-8d37-f8f62cc60a8a"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("ad9e91b8-6144-4f9c-81e3-0559cc5830a1")
                        },
                        new
                        {
                            ImageId = new Guid("0e123fab-f452-4053-bbd2-755de0e7ed29"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("ad9e91b8-6144-4f9c-81e3-0559cc5830a1")
                        },
                        new
                        {
                            ImageId = new Guid("1483d46f-f122-43e5-a54a-ab86d76d50cb"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("94b05df8-64fd-4976-973d-62362ad7d5e2")
                        },
                        new
                        {
                            ImageId = new Guid("9ff83138-fe1e-44fc-867e-7e23e1ec0e9b"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("94b05df8-64fd-4976-973d-62362ad7d5e2")
                        },
                        new
                        {
                            ImageId = new Guid("d7fd3655-3b9b-4427-8cc2-d47f8a10b607"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("94b05df8-64fd-4976-973d-62362ad7d5e2")
                        },
                        new
                        {
                            ImageId = new Guid("31b72d61-407e-4bf1-b6f8-e92bf49ed584"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("f2af4558-e395-4b88-b67f-abb596b9c6d0")
                        },
                        new
                        {
                            ImageId = new Guid("329cba95-8fc9-4f73-9c93-0d4a606c423e"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("f2af4558-e395-4b88-b67f-abb596b9c6d0")
                        },
                        new
                        {
                            ImageId = new Guid("82859ca3-875e-460d-9c50-6bb0e98a2141"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("f2af4558-e395-4b88-b67f-abb596b9c6d0")
                        },
                        new
                        {
                            ImageId = new Guid("11131b7a-90e7-4209-bc6b-69ea9c24a4bf"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-1.png",
                            ProductId = new Guid("29eca57a-81ff-4e3a-9d59-ee215619f628")
                        },
                        new
                        {
                            ImageId = new Guid("4e27f6b1-13c3-4b05-87ff-89d7aa9f2f77"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-2.png",
                            ProductId = new Guid("29eca57a-81ff-4e3a-9d59-ee215619f628")
                        },
                        new
                        {
                            ImageId = new Guid("76e7b3ef-491d-4527-858c-58de6fddec4b"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("29eca57a-81ff-4e3a-9d59-ee215619f628")
                        },
                        new
                        {
                            ImageId = new Guid("bde323d4-7551-4a28-99ca-e6029e0d2004"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("83fe2b76-bb52-4920-aba8-4c93ddf5a2d0")
                        },
                        new
                        {
                            ImageId = new Guid("387a79d5-dcf3-4ca4-a937-4949a96fe66c"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("83fe2b76-bb52-4920-aba8-4c93ddf5a2d0")
                        },
                        new
                        {
                            ImageId = new Guid("fbfef284-0573-4554-aaad-eb0c9cc22b80"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("83fe2b76-bb52-4920-aba8-4c93ddf5a2d0")
                        },
                        new
                        {
                            ImageId = new Guid("68050623-709f-4c99-8810-f3be193c5eb8"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("3fa04aac-4923-41a5-ac3a-969fd1394c70")
                        },
                        new
                        {
                            ImageId = new Guid("dd3f8acb-7882-4a33-bc60-0b310ac6c6e4"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("3fa04aac-4923-41a5-ac3a-969fd1394c70")
                        },
                        new
                        {
                            ImageId = new Guid("5d0a1247-033b-49c2-bebc-498200d0d276"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("3fa04aac-4923-41a5-ac3a-969fd1394c70")
                        },
                        new
                        {
                            ImageId = new Guid("c3c08194-17d0-4a89-bfd5-2287c4b15bad"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-1.png",
                            ProductId = new Guid("c52f77d5-a6eb-4a53-bc07-c024be560d38")
                        },
                        new
                        {
                            ImageId = new Guid("fe9ca250-5718-479b-ac95-0b628a339683"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-2.png",
                            ProductId = new Guid("c52f77d5-a6eb-4a53-bc07-c024be560d38")
                        },
                        new
                        {
                            ImageId = new Guid("87f5968c-7128-4f25-835c-2710c31b9344"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-3.png",
                            ProductId = new Guid("c52f77d5-a6eb-4a53-bc07-c024be560d38")
                        },
                        new
                        {
                            ImageId = new Guid("9ce45abe-4ebc-423c-851a-99bfc1dd285f"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("a808e4bc-e5bd-4efa-98d5-44393e9102fa")
                        },
                        new
                        {
                            ImageId = new Guid("8f3abdee-1178-44b9-9abf-bc1a596768ef"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("a808e4bc-e5bd-4efa-98d5-44393e9102fa")
                        },
                        new
                        {
                            ImageId = new Guid("0c20dfa4-d113-42f4-8a5c-d28dda1305d4"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("a808e4bc-e5bd-4efa-98d5-44393e9102fa")
                        },
                        new
                        {
                            ImageId = new Guid("41c575e2-5783-47b7-92c3-79426074dba8"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("91111577-7e3d-4dff-b37a-3310c498065a")
                        },
                        new
                        {
                            ImageId = new Guid("86cf93de-856f-4677-b83b-06afa0724b35"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("91111577-7e3d-4dff-b37a-3310c498065a")
                        },
                        new
                        {
                            ImageId = new Guid("b83c66b5-9fa0-4502-8ed6-a026b6f069e8"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("91111577-7e3d-4dff-b37a-3310c498065a")
                        },
                        new
                        {
                            ImageId = new Guid("67b64dd4-71ab-413b-8f84-b28656c904ba"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("3121c01c-f7a8-4e98-b20a-7d114d25caeb")
                        },
                        new
                        {
                            ImageId = new Guid("5a244e77-1517-4b4a-810b-532f7a289b5e"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("3121c01c-f7a8-4e98-b20a-7d114d25caeb")
                        },
                        new
                        {
                            ImageId = new Guid("2b53ff0e-5e71-4e5e-a9ff-f32ec3dfb972"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("3121c01c-f7a8-4e98-b20a-7d114d25caeb")
                        },
                        new
                        {
                            ImageId = new Guid("3f902e72-7481-4add-b891-d28e9ee25d4e"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-1.png",
                            ProductId = new Guid("2ef2c970-b80a-4f78-9792-d17e139bc400")
                        },
                        new
                        {
                            ImageId = new Guid("c7f11e32-33a2-436f-9f9e-eba080ed3941"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-2.png",
                            ProductId = new Guid("2ef2c970-b80a-4f78-9792-d17e139bc400")
                        },
                        new
                        {
                            ImageId = new Guid("4042458b-e0ee-4a00-8214-35251346e697"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-3.png",
                            ProductId = new Guid("2ef2c970-b80a-4f78-9792-d17e139bc400")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
