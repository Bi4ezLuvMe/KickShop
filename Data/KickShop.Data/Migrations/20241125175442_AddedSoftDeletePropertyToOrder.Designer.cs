// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241125175442_AddedSoftDeletePropertyToOrder")]
    partial class AddedSoftDeletePropertyToOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("87dbf881-2c8d-4654-a3fa-f8d030f31d45"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "/images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("f18554fb-6fae-4a2f-8f7b-916aef7d2fc7"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "/images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("c8396007-04a1-4ca3-8cd0-6c5c910f2375"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "/images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("110287f3-443a-41c9-bc39-756fd90a34d4"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "/images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("7d529bb0-e558-4947-8fd2-3b6472f84dd7"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("07cf0ee3-6555-4e9a-b366-eaa5de6d9f46"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "/images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("ed861016-1e1c-48a4-ad51-1c7a8674eff9"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("c81bae19-8a4b-4d52-8b5d-1160ebf41adf"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "/images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("1a81d4f2-921b-4822-8379-4394b77fd2e5"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("68a907c7-3c05-4b72-bd8b-dc500742c001"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The Quantity Of The Product");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Selected Size Of The Product");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("b25ddb17-a18b-4531-8cf3-2d27af224e4a"),
                            ImageUrl = "/images/Categegories/boxing-gloves.jfif",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("d2124e41-b311-4e56-a6d7-d32f67b3368c"),
                            ImageUrl = "/images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("235c5d7d-1ba6-4751-a3d7-b0ae27de0f8f"),
                            ImageUrl = "/images/Categories/shin-guards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("e2f2567e-cb5e-4faf-a931-9371f568f395"),
                            ImageUrl = "/images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("25e75a5f-fcd7-40ab-b6f7-b65cfa620b04"),
                            ImageUrl = "/images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("fa8f4dcb-f4b6-484c-bdee-64eed73f6acf"),
                            ImageUrl = "/images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("654c0f7e-3583-407a-9cd1-90f1478c2ca0"),
                            ImageUrl = "/images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("0c2cec2f-adad-42c8-a3b0-f91bf46e7f0f"),
                            ImageUrl = "/images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("c0d36680-5696-4f2e-94e4-45099a12fe39"),
                            ImageUrl = "/images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("1c2e748e-6c81-46ac-9f53-7f636dfcda7d"),
                            ImageUrl = "/images/Categories/protective-equipment.jfif",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Billing Address Of The Order");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Billing City Of The Order");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Billing Name Of The Order");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Billing PostCode Of The Order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("a237f3fc-03fd-41a9-9e4e-d92fc0427c5e"),
                            BrandId = new Guid("f18554fb-6fae-4a2f-8f7b-916aef7d2fc7"),
                            CategoryId = new Guid("b25ddb17-a18b-4531-8cf3-2d27af224e4a"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            Name = "RDX Boxing Gloves",
                            Price = 109.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("b8f29bd2-363a-4f64-84c6-e272e838d00e"),
                            BrandId = new Guid("c8396007-04a1-4ca3-8cd0-6c5c910f2375"),
                            CategoryId = new Guid("b25ddb17-a18b-4531-8cf3-2d27af224e4a"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 189.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("a0072c0f-2c8c-4782-958a-1d00703fe406"),
                            BrandId = new Guid("110287f3-443a-41c9-bc39-756fd90a34d4"),
                            CategoryId = new Guid("b25ddb17-a18b-4531-8cf3-2d27af224e4a"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            Name = "Venum Challenger Gloves",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("fd2bd1a9-b7ee-41df-b9ff-6ce44bbf2521"),
                            BrandId = new Guid("07cf0ee3-6555-4e9a-b366-eaa5de6d9f46"),
                            CategoryId = new Guid("b25ddb17-a18b-4531-8cf3-2d27af224e4a"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 79.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("dcddba1b-acc2-4089-b25e-227f99f47c6f"),
                            BrandId = new Guid("c81bae19-8a4b-4d52-8b5d-1160ebf41adf"),
                            CategoryId = new Guid("d2124e41-b311-4e56-a6d7-d32f67b3368c"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 79.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("60c9bcda-5bd2-420b-86b3-d0294c4e241e"),
                            BrandId = new Guid("1a81d4f2-921b-4822-8379-4394b77fd2e5"),
                            CategoryId = new Guid("235c5d7d-1ba6-4751-a3d7-b0ae27de0f8f"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            Name = "Sanabul Essential Shin Guards",
                            Price = 105.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("894613c6-97f7-4a7a-ad74-74ae66a3f84d"),
                            BrandId = new Guid("68a907c7-3c05-4b72-bd8b-dc500742c001"),
                            CategoryId = new Guid("25e75a5f-fcd7-40ab-b6f7-b65cfa620b04"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-1.png",
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("a83d310d-9c10-4f51-a130-a8d9178e7df6"),
                            BrandId = new Guid("87dbf881-2c8d-4654-a3fa-f8d030f31d45"),
                            CategoryId = new Guid("e2f2567e-cb5e-4faf-a931-9371f568f395"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("8c5c53e0-5632-4201-8ed2-a348638dafa7"),
                            BrandId = new Guid("ed861016-1e1c-48a4-ad51-1c7a8674eff9"),
                            CategoryId = new Guid("654c0f7e-3583-407a-9cd1-90f1478c2ca0"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            Name = "Ringside Punching Bag",
                            Price = 219.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("33e60ab1-75f5-422a-a6b5-6a9461057834"),
                            BrandId = new Guid("f18554fb-6fae-4a2f-8f7b-916aef7d2fc7"),
                            CategoryId = new Guid("c0d36680-5696-4f2e-94e4-45099a12fe39"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-1.png",
                            Name = "RDX Pro Boxing Shoes",
                            Price = 109.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("b0a1b119-967d-4e0f-8383-363e4e4095b4"),
                            BrandId = new Guid("110287f3-443a-41c9-bc39-756fd90a34d4"),
                            CategoryId = new Guid("235c5d7d-1ba6-4751-a3d7-b0ae27de0f8f"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            Name = "Venum Challenger Shin Guards",
                            Price = 105.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("40eae73d-3f82-4ad1-8af3-a77fab3c5982"),
                            BrandId = new Guid("7d529bb0-e558-4947-8fd2-3b6472f84dd7"),
                            CategoryId = new Guid("d2124e41-b311-4e56-a6d7-d32f67b3368c"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 84.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("660ab8ef-62a5-49f9-b78f-8e5129b1ad6d"),
                            BrandId = new Guid("07cf0ee3-6555-4e9a-b366-eaa5de6d9f46"),
                            CategoryId = new Guid("654c0f7e-3583-407a-9cd1-90f1478c2ca0"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            Name = "Title Boxing Double End Bag",
                            Price = 99.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("3905538a-060d-42f1-90e7-d6f4f6ea8023"),
                            BrandId = new Guid("87dbf881-2c8d-4654-a3fa-f8d030f31d45"),
                            CategoryId = new Guid("25e75a5f-fcd7-40ab-b6f7-b65cfa620b04"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlast-pro-headgear/everlast-headgear-1.png",
                            Name = "Everlast Pro Headgear",
                            Price = 89.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("b072a725-6f80-4514-9a1d-4d5842b7f2a8"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-1.png",
                            ProductId = new Guid("a237f3fc-03fd-41a9-9e4e-d92fc0427c5e")
                        },
                        new
                        {
                            ImageId = new Guid("cbdd51df-869c-4e69-8b96-0d99298d543e"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-2.png",
                            ProductId = new Guid("a237f3fc-03fd-41a9-9e4e-d92fc0427c5e")
                        },
                        new
                        {
                            ImageId = new Guid("16600136-a5eb-468d-b127-579100467411"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            ProductId = new Guid("a237f3fc-03fd-41a9-9e4e-d92fc0427c5e")
                        },
                        new
                        {
                            ImageId = new Guid("e12c615e-431d-4ffa-99bd-88f748662cd6"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("b8f29bd2-363a-4f64-84c6-e272e838d00e")
                        },
                        new
                        {
                            ImageId = new Guid("c503490d-c9b8-4d63-894d-f2142d08b344"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("b8f29bd2-363a-4f64-84c6-e272e838d00e")
                        },
                        new
                        {
                            ImageId = new Guid("507f2f7d-a376-4ae2-a25a-1c418e776ab6"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("b8f29bd2-363a-4f64-84c6-e272e838d00e")
                        },
                        new
                        {
                            ImageId = new Guid("1ea8d3fb-ffd8-4b63-aa83-5de902a52cec"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("a0072c0f-2c8c-4782-958a-1d00703fe406")
                        },
                        new
                        {
                            ImageId = new Guid("ac0cc2f3-3509-4b2f-b666-a7b81c918a63"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("a0072c0f-2c8c-4782-958a-1d00703fe406")
                        },
                        new
                        {
                            ImageId = new Guid("04845ee6-3827-47bf-bbe9-83dcc36bf037"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("a0072c0f-2c8c-4782-958a-1d00703fe406")
                        },
                        new
                        {
                            ImageId = new Guid("d882715d-b3a2-453a-a89e-5f43572cdde8"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("fd2bd1a9-b7ee-41df-b9ff-6ce44bbf2521")
                        },
                        new
                        {
                            ImageId = new Guid("be9adf42-4a3d-4203-979c-27306a0eb6aa"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("fd2bd1a9-b7ee-41df-b9ff-6ce44bbf2521")
                        },
                        new
                        {
                            ImageId = new Guid("96289231-200c-4ed0-8953-8bf9d5c17cfd"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("fd2bd1a9-b7ee-41df-b9ff-6ce44bbf2521")
                        },
                        new
                        {
                            ImageId = new Guid("4a559fbb-9f2e-425a-b414-9643047ea641"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("dcddba1b-acc2-4089-b25e-227f99f47c6f")
                        },
                        new
                        {
                            ImageId = new Guid("bf1a372a-e448-46df-ac1d-6e13cef0cc0a"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("dcddba1b-acc2-4089-b25e-227f99f47c6f")
                        },
                        new
                        {
                            ImageId = new Guid("ca5be104-a244-4824-b278-45fcbd14ca5a"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("dcddba1b-acc2-4089-b25e-227f99f47c6f")
                        },
                        new
                        {
                            ImageId = new Guid("4e5a5d86-c32f-4c43-9ff4-60f750c56445"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("60c9bcda-5bd2-420b-86b3-d0294c4e241e")
                        },
                        new
                        {
                            ImageId = new Guid("8810cac7-485e-4ebc-92d9-f97b8a8063f3"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("60c9bcda-5bd2-420b-86b3-d0294c4e241e")
                        },
                        new
                        {
                            ImageId = new Guid("39afc354-148f-4321-bf83-04b24cfddc09"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("60c9bcda-5bd2-420b-86b3-d0294c4e241e")
                        },
                        new
                        {
                            ImageId = new Guid("0ea7014c-97f6-4a19-8b08-f9b059fa3985"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-1.png",
                            ProductId = new Guid("894613c6-97f7-4a7a-ad74-74ae66a3f84d")
                        },
                        new
                        {
                            ImageId = new Guid("187a5c29-14b4-4123-a631-aa68d1b805f6"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-special-headgear-2.png",
                            ProductId = new Guid("894613c6-97f7-4a7a-ad74-74ae66a3f84d")
                        },
                        new
                        {
                            ImageId = new Guid("0c6f8b87-66bd-4746-81a3-b38f14e7dbb8"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("894613c6-97f7-4a7a-ad74-74ae66a3f84d")
                        },
                        new
                        {
                            ImageId = new Guid("90171adc-e7a9-4680-80ac-91a7026e4444"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("a83d310d-9c10-4f51-a130-a8d9178e7df6")
                        },
                        new
                        {
                            ImageId = new Guid("8e64fa31-bcc1-404f-bfc6-454ae196374b"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("a83d310d-9c10-4f51-a130-a8d9178e7df6")
                        },
                        new
                        {
                            ImageId = new Guid("e6b42b87-624f-4ea3-b50c-e82eabf6b6d1"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("a83d310d-9c10-4f51-a130-a8d9178e7df6")
                        },
                        new
                        {
                            ImageId = new Guid("6c68e807-0cd8-4c65-ae59-ac9d5032a9dd"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("8c5c53e0-5632-4201-8ed2-a348638dafa7")
                        },
                        new
                        {
                            ImageId = new Guid("c7b2aabf-a963-4474-abeb-d3bcca2459f2"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("8c5c53e0-5632-4201-8ed2-a348638dafa7")
                        },
                        new
                        {
                            ImageId = new Guid("c1f133ec-eab1-4c85-a12c-d745a2a2d55b"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("8c5c53e0-5632-4201-8ed2-a348638dafa7")
                        },
                        new
                        {
                            ImageId = new Guid("f9ad83e7-9445-4d43-b906-b9ddf1afcef0"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-1.png",
                            ProductId = new Guid("33e60ab1-75f5-422a-a6b5-6a9461057834")
                        },
                        new
                        {
                            ImageId = new Guid("ca80141b-bcfa-424b-a876-18a3f58fce82"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-2.png",
                            ProductId = new Guid("33e60ab1-75f5-422a-a6b5-6a9461057834")
                        },
                        new
                        {
                            ImageId = new Guid("ee97fd1c-f166-47ed-9227-e289fcf7415c"),
                            ImageUrl = "/images/Products/rdx-boxing-shoes/rdx-boxing-shoes-3.png",
                            ProductId = new Guid("33e60ab1-75f5-422a-a6b5-6a9461057834")
                        },
                        new
                        {
                            ImageId = new Guid("2d91a990-e13c-4ff9-8c2b-59f1e1e2f9c4"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("b0a1b119-967d-4e0f-8383-363e4e4095b4")
                        },
                        new
                        {
                            ImageId = new Guid("e65a4c07-6aa3-4d16-aadf-ae563d83071d"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("b0a1b119-967d-4e0f-8383-363e4e4095b4")
                        },
                        new
                        {
                            ImageId = new Guid("d37e9a21-27e5-47d3-b4f5-4b3706b89268"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("b0a1b119-967d-4e0f-8383-363e4e4095b4")
                        },
                        new
                        {
                            ImageId = new Guid("c69a17a7-6bcf-4ede-9008-891f4ff98f4a"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("40eae73d-3f82-4ad1-8af3-a77fab3c5982")
                        },
                        new
                        {
                            ImageId = new Guid("fc45e725-7838-4032-9882-8df1212ac486"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("40eae73d-3f82-4ad1-8af3-a77fab3c5982")
                        },
                        new
                        {
                            ImageId = new Guid("9ce0ab17-7567-43f6-a709-29089f85e1d1"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("40eae73d-3f82-4ad1-8af3-a77fab3c5982")
                        },
                        new
                        {
                            ImageId = new Guid("a7273c9b-dc7b-4404-8dae-ad44d71b5f8c"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("660ab8ef-62a5-49f9-b78f-8e5129b1ad6d")
                        },
                        new
                        {
                            ImageId = new Guid("c9bb1b09-02bb-4df5-9b70-03deac93e1ab"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("660ab8ef-62a5-49f9-b78f-8e5129b1ad6d")
                        },
                        new
                        {
                            ImageId = new Guid("4d798757-37a1-4c0f-b8b6-4470737e8a04"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("660ab8ef-62a5-49f9-b78f-8e5129b1ad6d")
                        },
                        new
                        {
                            ImageId = new Guid("32ee6e7c-18a6-4a4f-8479-4e91ed00a43c"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-1.png",
                            ProductId = new Guid("3905538a-060d-42f1-90e7-d6f4f6ea8023")
                        },
                        new
                        {
                            ImageId = new Guid("06969107-a194-4a22-948a-970e852d7a97"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-2.png",
                            ProductId = new Guid("3905538a-060d-42f1-90e7-d6f4f6ea8023")
                        },
                        new
                        {
                            ImageId = new Guid("db2ba12a-1896-48a4-b74a-9e122c394bd9"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-headgear-3.png",
                            ProductId = new Guid("3905538a-060d-42f1-90e7-d6f4f6ea8023")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
