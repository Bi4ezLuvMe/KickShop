// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241114204442_FixedImageUrls")]
    partial class FixedImageUrls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("0dbc89bc-f05b-480d-a485-71e03e9d4d2f"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "/images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("1ec6f994-2896-49ee-a8e5-f4f0bd34759d"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "/images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("2b8ce36d-3bc4-4f1d-aec4-e2983cbe101d"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "/images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("8a322464-6579-498f-bafb-40baf2bdfb29"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "/images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("e23e89cf-03ab-4b63-8e3f-efe2a23dbdfd"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("b4095c5e-225c-44dd-98dd-a43428505fca"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "/images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("d103c2d4-3a8f-453b-a040-188188b609a4"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("52ce217f-d1b3-4c8d-98eb-304ded1863e2"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "/images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("d36c1d2c-9dc6-4272-bff8-7668a34f7d94"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("d3c7ccad-0d55-43af-a46b-7c9d9ead1de9"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e92a5096-2e4d-4f68-a488-59156ad8d859"),
                            ImageUrl = "/images/Categegories/boxing-gloves.png",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("474bfb92-4884-4f02-bee1-15b38c0ed45c"),
                            ImageUrl = "/images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("51579095-a6e7-45e6-9743-67024a8400bd"),
                            ImageUrl = "/images/Categories/shinguards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("ccadbad4-817c-4149-b3b7-3ed67d59d4f2"),
                            ImageUrl = "/images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("32913907-7481-4277-8ded-4951d25a9012"),
                            ImageUrl = "/images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("6dc2e527-4b6c-4782-a8fc-9059cf646ec9"),
                            ImageUrl = "/images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("56a7c962-01b5-42dd-b258-09409a3b3b68"),
                            ImageUrl = "/images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("60ede473-4f5d-4fe5-8f03-d68ae49ef8a5"),
                            ImageUrl = "/images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("150e24fd-7406-4e3d-b65b-d399c6a23a60"),
                            ImageUrl = "/images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("91f3d47c-c2de-47cc-9fd4-f2cba2adfa4e"),
                            ImageUrl = "/images/Categories/protective-gear.png",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("0f84bc1c-ca07-48a8-82ae-cebba592cab7"),
                            BrandId = new Guid("1ec6f994-2896-49ee-a8e5-f4f0bd34759d"),
                            CategoryId = new Guid("e92a5096-2e4d-4f68-a488-59156ad8d859"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            Name = "RDX Boxing Gloves",
                            Price = 49.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("9459b013-8289-44cb-b651-5d3689e1db5d"),
                            BrandId = new Guid("2b8ce36d-3bc4-4f1d-aec4-e2983cbe101d"),
                            CategoryId = new Guid("e92a5096-2e4d-4f68-a488-59156ad8d859"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 89.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("5e57c952-06f6-46d3-96cf-74e407539fd7"),
                            BrandId = new Guid("8a322464-6579-498f-bafb-40baf2bdfb29"),
                            CategoryId = new Guid("e92a5096-2e4d-4f68-a488-59156ad8d859"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            Name = "Venum Challenger Gloves",
                            Price = 39.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("c22789ca-4000-430d-9d97-362125f8e1e7"),
                            BrandId = new Guid("b4095c5e-225c-44dd-98dd-a43428505fca"),
                            CategoryId = new Guid("e92a5096-2e4d-4f68-a488-59156ad8d859"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 59.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("9743c0ed-505f-4b0f-b681-b23f46f65963"),
                            BrandId = new Guid("52ce217f-d1b3-4c8d-98eb-304ded1863e2"),
                            CategoryId = new Guid("474bfb92-4884-4f02-bee1-15b38c0ed45c"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 29.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("386447b9-057e-4578-9e53-bb02d7e49ff7"),
                            BrandId = new Guid("d36c1d2c-9dc6-4272-bff8-7668a34f7d94"),
                            CategoryId = new Guid("51579095-a6e7-45e6-9743-67024a8400bd"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            Name = "Sanabul Essential Shin Guards",
                            Price = 35.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("6357f6cc-f4b4-407a-9710-71533d7e95ab"),
                            BrandId = new Guid("d3c7ccad-0d55-43af-a46b-7c9d9ead1de9"),
                            CategoryId = new Guid("32913907-7481-4277-8ded-4951d25a9012"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("bb18467d-c79f-476a-aaa8-f216399699a4"),
                            BrandId = new Guid("0dbc89bc-f05b-480d-a485-71e03e9d4d2f"),
                            CategoryId = new Guid("ccadbad4-817c-4149-b3b7-3ed67d59d4f2"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("05df459d-08ff-4d54-b1df-51f40cfdb5d2"),
                            BrandId = new Guid("d103c2d4-3a8f-453b-a040-188188b609a4"),
                            CategoryId = new Guid("56a7c962-01b5-42dd-b258-09409a3b3b68"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            Name = "Ringside Punching Bag",
                            Price = 119.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("4e24ebca-f60b-4ac6-91e1-9d6aefbc119c"),
                            BrandId = new Guid("1ec6f994-2896-49ee-a8e5-f4f0bd34759d"),
                            CategoryId = new Guid("150e24fd-7406-4e3d-b65b-d399c6a23a60"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            Name = "RDX Pro Boxing Shoes",
                            Price = 69.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("2b11be27-96c8-4afa-b08c-c281850cbd29"),
                            BrandId = new Guid("8a322464-6579-498f-bafb-40baf2bdfb29"),
                            CategoryId = new Guid("51579095-a6e7-45e6-9743-67024a8400bd"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            Name = "Venum Challenger Shin Guards",
                            Price = 45.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("4b749ba6-a76c-4ae3-a1d8-5199caa8e5b3"),
                            BrandId = new Guid("e23e89cf-03ab-4b63-8e3f-efe2a23dbdfd"),
                            CategoryId = new Guid("474bfb92-4884-4f02-bee1-15b38c0ed45c"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 34.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("a64428a7-70a7-4bde-85e2-c6a964879003"),
                            BrandId = new Guid("b4095c5e-225c-44dd-98dd-a43428505fca"),
                            CategoryId = new Guid("56a7c962-01b5-42dd-b258-09409a3b3b68"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            Name = "Title Boxing Double End Bag",
                            Price = 44.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("1a526c08-9e0c-46b1-8e31-a5a7bf9fc777"),
                            BrandId = new Guid("0dbc89bc-f05b-480d-a485-71e03e9d4d2f"),
                            CategoryId = new Guid("32913907-7481-4277-8ded-4951d25a9012"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            Name = "Everlast Pro Headgear",
                            Price = 69.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("ee17092d-d898-478b-8ced-7cec9083548c"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-gloves-1.png",
                            ProductId = new Guid("0f84bc1c-ca07-48a8-82ae-cebba592cab7")
                        },
                        new
                        {
                            ImageId = new Guid("ff397a5e-1ed6-4b75-8873-7f316bbe80a6"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-gloves-2.png",
                            ProductId = new Guid("0f84bc1c-ca07-48a8-82ae-cebba592cab7")
                        },
                        new
                        {
                            ImageId = new Guid("6041296f-d0b7-4dd6-a415-0601b77c8465"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-gloves-3.png",
                            ProductId = new Guid("0f84bc1c-ca07-48a8-82ae-cebba592cab7")
                        },
                        new
                        {
                            ImageId = new Guid("6e279bd0-a4a0-4565-addc-58fea40b96e0"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("9459b013-8289-44cb-b651-5d3689e1db5d")
                        },
                        new
                        {
                            ImageId = new Guid("86ab243e-b55d-4afc-887b-538489bf9333"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("9459b013-8289-44cb-b651-5d3689e1db5d")
                        },
                        new
                        {
                            ImageId = new Guid("dff15ad3-bf78-4f88-bd81-08e5b1ec9d11"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("9459b013-8289-44cb-b651-5d3689e1db5d")
                        },
                        new
                        {
                            ImageId = new Guid("c51e659d-7855-495f-afe0-b003019c6c46"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("5e57c952-06f6-46d3-96cf-74e407539fd7")
                        },
                        new
                        {
                            ImageId = new Guid("d7b692d7-d115-4094-9786-719216e633a6"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("5e57c952-06f6-46d3-96cf-74e407539fd7")
                        },
                        new
                        {
                            ImageId = new Guid("fa241cdc-9945-4964-a668-0b2b9223a2bc"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("5e57c952-06f6-46d3-96cf-74e407539fd7")
                        },
                        new
                        {
                            ImageId = new Guid("42ab9b27-5584-43a8-9eca-58dc8ef505f6"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("c22789ca-4000-430d-9d97-362125f8e1e7")
                        },
                        new
                        {
                            ImageId = new Guid("d7b0b5be-de88-420f-b54f-f9bc09cf951f"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("c22789ca-4000-430d-9d97-362125f8e1e7")
                        },
                        new
                        {
                            ImageId = new Guid("831644e2-74f4-4f7a-b846-ff6170df6c3d"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("c22789ca-4000-430d-9d97-362125f8e1e7")
                        },
                        new
                        {
                            ImageId = new Guid("b821a79c-fbea-4d8e-9842-70f2b3e6f197"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("9743c0ed-505f-4b0f-b681-b23f46f65963")
                        },
                        new
                        {
                            ImageId = new Guid("8c225889-c315-496e-8154-dddae110aa88"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("9743c0ed-505f-4b0f-b681-b23f46f65963")
                        },
                        new
                        {
                            ImageId = new Guid("f75161e3-9898-4416-8599-5891c13716bb"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("9743c0ed-505f-4b0f-b681-b23f46f65963")
                        },
                        new
                        {
                            ImageId = new Guid("9a2688e4-0fe1-48ed-a7fa-aa2cbcbc6052"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("386447b9-057e-4578-9e53-bb02d7e49ff7")
                        },
                        new
                        {
                            ImageId = new Guid("23ab83fd-decc-4025-8d78-47b01bbb62d8"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("386447b9-057e-4578-9e53-bb02d7e49ff7")
                        },
                        new
                        {
                            ImageId = new Guid("230dd617-053a-49ed-ac25-c96d9972f356"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("386447b9-057e-4578-9e53-bb02d7e49ff7")
                        },
                        new
                        {
                            ImageId = new Guid("c772dc5a-d5ab-4bf1-9cde-c4c0ad203b60"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-1.png",
                            ProductId = new Guid("6357f6cc-f4b4-407a-9710-71533d7e95ab")
                        },
                        new
                        {
                            ImageId = new Guid("a3dcd7c3-2218-4caa-b107-f90f5ad4fc7e"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-2.png",
                            ProductId = new Guid("6357f6cc-f4b4-407a-9710-71533d7e95ab")
                        },
                        new
                        {
                            ImageId = new Guid("60266eec-e1c3-4b35-abbb-2ae030de512f"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("6357f6cc-f4b4-407a-9710-71533d7e95ab")
                        },
                        new
                        {
                            ImageId = new Guid("4232f190-d657-4506-8386-a5b6ef3a32dd"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("bb18467d-c79f-476a-aaa8-f216399699a4")
                        },
                        new
                        {
                            ImageId = new Guid("b896c1b9-b262-4ed3-b139-11385e62f3f9"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("bb18467d-c79f-476a-aaa8-f216399699a4")
                        },
                        new
                        {
                            ImageId = new Guid("2341dff9-82e8-41ea-b4bf-465c291db2c3"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("bb18467d-c79f-476a-aaa8-f216399699a4")
                        },
                        new
                        {
                            ImageId = new Guid("4e6136e1-43a0-4943-973d-fa9110a0a93a"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("05df459d-08ff-4d54-b1df-51f40cfdb5d2")
                        },
                        new
                        {
                            ImageId = new Guid("281ff4f4-c5f5-42b7-97b1-85f06db030a5"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("05df459d-08ff-4d54-b1df-51f40cfdb5d2")
                        },
                        new
                        {
                            ImageId = new Guid("15a42637-0f00-4dc7-89fa-fd6fd3f11203"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("05df459d-08ff-4d54-b1df-51f40cfdb5d2")
                        },
                        new
                        {
                            ImageId = new Guid("e9c9c862-ef76-4071-9944-fbe95cd8c373"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-1.png",
                            ProductId = new Guid("4e24ebca-f60b-4ac6-91e1-9d6aefbc119c")
                        },
                        new
                        {
                            ImageId = new Guid("596338b3-7e00-4b86-8899-329ae12a49da"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-2.png",
                            ProductId = new Guid("4e24ebca-f60b-4ac6-91e1-9d6aefbc119c")
                        },
                        new
                        {
                            ImageId = new Guid("ed5128ad-28c1-42ca-95ef-62e3e146eba1"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-3.png",
                            ProductId = new Guid("4e24ebca-f60b-4ac6-91e1-9d6aefbc119c")
                        },
                        new
                        {
                            ImageId = new Guid("7c1e7222-640e-41e1-b541-0aa2d100fd23"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("2b11be27-96c8-4afa-b08c-c281850cbd29")
                        },
                        new
                        {
                            ImageId = new Guid("d16e0702-fd9c-4a00-bcde-9809aa30c7f4"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("2b11be27-96c8-4afa-b08c-c281850cbd29")
                        },
                        new
                        {
                            ImageId = new Guid("a36010a4-d587-4956-a5ca-825d73f651a5"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("2b11be27-96c8-4afa-b08c-c281850cbd29")
                        },
                        new
                        {
                            ImageId = new Guid("56894346-bdd6-4645-94b0-7a15b52c2ec5"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("4b749ba6-a76c-4ae3-a1d8-5199caa8e5b3")
                        },
                        new
                        {
                            ImageId = new Guid("6b483774-9e4c-4198-8b30-1236e34ef53a"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("4b749ba6-a76c-4ae3-a1d8-5199caa8e5b3")
                        },
                        new
                        {
                            ImageId = new Guid("7a591e76-eebb-4475-97f6-14caf4eec9e1"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("4b749ba6-a76c-4ae3-a1d8-5199caa8e5b3")
                        },
                        new
                        {
                            ImageId = new Guid("aedd02b0-055f-458b-8d6c-771c2c8f9d3d"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("a64428a7-70a7-4bde-85e2-c6a964879003")
                        },
                        new
                        {
                            ImageId = new Guid("521a8c3a-8a75-478d-ae1e-1f0a78ccf2eb"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("a64428a7-70a7-4bde-85e2-c6a964879003")
                        },
                        new
                        {
                            ImageId = new Guid("5e7751ef-470b-4695-b40a-6ed4193eb428"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("a64428a7-70a7-4bde-85e2-c6a964879003")
                        },
                        new
                        {
                            ImageId = new Guid("1a02a2f3-224e-4c36-a83f-04245fd739f9"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-1.png",
                            ProductId = new Guid("1a526c08-9e0c-46b1-8e31-a5a7bf9fc777")
                        },
                        new
                        {
                            ImageId = new Guid("d4e79b4d-2b8e-4710-a0e5-08073a36f534"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-2.png",
                            ProductId = new Guid("1a526c08-9e0c-46b1-8e31-a5a7bf9fc777")
                        },
                        new
                        {
                            ImageId = new Guid("fda25eac-aa48-407e-8b08-5a75aa8263ea"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-3.png",
                            ProductId = new Guid("1a526c08-9e0c-46b1-8e31-a5a7bf9fc777")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
