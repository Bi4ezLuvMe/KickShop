// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241114212104_FixedMainImageUrlProblem")]
    partial class FixedMainImageUrlProblem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("313e4559-45bc-41df-b670-fc949899bbc4"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "/images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("30d3c248-fc96-48c8-8fa8-221544ae2fc8"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "/images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("4479663d-9879-4466-a9b7-f8193992b3a6"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "/images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("248cc2e8-ddaf-4823-9be7-2b849acb9d8a"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "/images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("4eced22a-c181-4870-9d60-b244ac446838"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("be4b4f23-b0e4-4d42-9315-147df5ffc3e0"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "/images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("7b07e107-99e2-40be-ba06-d0b5a705350b"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("b10113d8-6c04-4d01-8bff-6fa31b882f08"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "/images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("23f367a6-991a-4e05-b066-f5facbcbf549"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "/images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("716bdc21-f89c-41d3-bc74-e35d7bc02e2c"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "/images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("56ea514b-ed66-4b38-a9c0-597a30f98ac6"),
                            ImageUrl = "/images/Categegories/boxing-gloves.png",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("b70d37e3-fe2f-42ae-aa89-5b8f2695e8e7"),
                            ImageUrl = "/images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("5b3ac614-76fe-4460-9996-e6c148d101e1"),
                            ImageUrl = "/images/Categories/shinguards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("597d624a-1919-4316-8710-176a021ad9b3"),
                            ImageUrl = "/images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("63144409-4afa-4a11-adc8-2b4889f192a3"),
                            ImageUrl = "/images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("0aeedcb1-18ff-4150-a4a2-414c3acbc3b7"),
                            ImageUrl = "/images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("74ef25f0-faa9-497e-8a33-608f9afaeb51"),
                            ImageUrl = "/images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("0bcb7b6c-f815-4de8-bf96-86707047cd5d"),
                            ImageUrl = "/images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("65a54501-fb5b-460b-9631-1f936ccbb98f"),
                            ImageUrl = "/images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("4a2ac05e-d9d4-4391-88d4-9b65c24790dc"),
                            ImageUrl = "/images/Categories/protective-gear.png",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("fc9d22a4-ce0f-496c-9f89-428b6c1b1c15"),
                            BrandId = new Guid("30d3c248-fc96-48c8-8fa8-221544ae2fc8"),
                            CategoryId = new Guid("56ea514b-ed66-4b38-a9c0-597a30f98ac6"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-1.png",
                            Name = "RDX Boxing Gloves",
                            Price = 49.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("ab3ee8b6-eebb-43c5-8c32-b332d5c4ad10"),
                            BrandId = new Guid("4479663d-9879-4466-a9b7-f8193992b3a6"),
                            CategoryId = new Guid("56ea514b-ed66-4b38-a9c0-597a30f98ac6"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 89.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("817a03d7-5550-4c8b-8afa-5d49aa47931b"),
                            BrandId = new Guid("248cc2e8-ddaf-4823-9be7-2b849acb9d8a"),
                            CategoryId = new Guid("56ea514b-ed66-4b38-a9c0-597a30f98ac6"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            Name = "Venum Challenger Gloves",
                            Price = 39.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("cabe6b67-bb24-4c5e-b495-8b426cb4323b"),
                            BrandId = new Guid("be4b4f23-b0e4-4d42-9315-147df5ffc3e0"),
                            CategoryId = new Guid("56ea514b-ed66-4b38-a9c0-597a30f98ac6"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 59.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("7a0e08e2-7ef6-45af-8c60-a9ee7688bbc1"),
                            BrandId = new Guid("b10113d8-6c04-4d01-8bff-6fa31b882f08"),
                            CategoryId = new Guid("b70d37e3-fe2f-42ae-aa89-5b8f2695e8e7"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 29.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("1c85b2f1-778c-4866-9b88-7324c9331381"),
                            BrandId = new Guid("23f367a6-991a-4e05-b066-f5facbcbf549"),
                            CategoryId = new Guid("5b3ac614-76fe-4460-9996-e6c148d101e1"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            Name = "Sanabul Essential Shin Guards",
                            Price = 35.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("7184e4a1-7ad8-4894-a37e-10c885eb1203"),
                            BrandId = new Guid("716bdc21-f89c-41d3-bc74-e35d7bc02e2c"),
                            CategoryId = new Guid("63144409-4afa-4a11-adc8-2b4889f192a3"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-1.png",
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("8334bf0d-3c8f-4adf-970d-12a27ce0de6f"),
                            BrandId = new Guid("313e4559-45bc-41df-b670-fc949899bbc4"),
                            CategoryId = new Guid("597d624a-1919-4316-8710-176a021ad9b3"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("2f761748-ec2f-4d80-b994-d16cf9198a3f"),
                            BrandId = new Guid("7b07e107-99e2-40be-ba06-d0b5a705350b"),
                            CategoryId = new Guid("74ef25f0-faa9-497e-8a33-608f9afaeb51"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            Name = "Ringside Punching Bag",
                            Price = 119.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("6c1f0b6f-b5e6-4565-9f6f-e61983355a20"),
                            BrandId = new Guid("30d3c248-fc96-48c8-8fa8-221544ae2fc8"),
                            CategoryId = new Guid("65a54501-fb5b-460b-9631-1f936ccbb98f"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-1.png",
                            Name = "RDX Pro Boxing Shoes",
                            Price = 69.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("cac4733a-d4e6-4a20-8545-82d86cf2908f"),
                            BrandId = new Guid("248cc2e8-ddaf-4823-9be7-2b849acb9d8a"),
                            CategoryId = new Guid("5b3ac614-76fe-4460-9996-e6c148d101e1"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            Name = "Venum Challenger Shin Guards",
                            Price = 45.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("9f583531-77c6-4df1-a26e-31ebce5ac44b"),
                            BrandId = new Guid("4eced22a-c181-4870-9d60-b244ac446838"),
                            CategoryId = new Guid("b70d37e3-fe2f-42ae-aa89-5b8f2695e8e7"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 34.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("14213bcd-4f55-4c5e-a358-149b27245252"),
                            BrandId = new Guid("be4b4f23-b0e4-4d42-9315-147df5ffc3e0"),
                            CategoryId = new Guid("74ef25f0-faa9-497e-8a33-608f9afaeb51"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            Name = "Title Boxing Double End Bag",
                            Price = 44.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("635480f0-b7dc-45f1-8d2f-1fd4e7c4a797"),
                            BrandId = new Guid("313e4559-45bc-41df-b670-fc949899bbc4"),
                            CategoryId = new Guid("63144409-4afa-4a11-adc8-2b4889f192a3"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            MainImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-1.png",
                            Name = "Everlast Pro Headgear",
                            Price = 69.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("17d41fac-10f9-4e48-94af-5e507d9049fe"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-1.png",
                            ProductId = new Guid("fc9d22a4-ce0f-496c-9f89-428b6c1b1c15")
                        },
                        new
                        {
                            ImageId = new Guid("fa70ce47-4649-4eb4-b4df-41b2aee5e1aa"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-2.png",
                            ProductId = new Guid("fc9d22a4-ce0f-496c-9f89-428b6c1b1c15")
                        },
                        new
                        {
                            ImageId = new Guid("1b1cad53-569d-4ec7-b074-cd211029bd10"),
                            ImageUrl = "/images/Products/rdx-boxing-gloves/rdx-boxing-glove-3.png",
                            ProductId = new Guid("fc9d22a4-ce0f-496c-9f89-428b6c1b1c15")
                        },
                        new
                        {
                            ImageId = new Guid("66633be3-ae8c-4653-9417-df6c0ec43365"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("ab3ee8b6-eebb-43c5-8c32-b332d5c4ad10")
                        },
                        new
                        {
                            ImageId = new Guid("154dd9b6-bcf3-417b-b41c-3741bf3eb4a6"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("ab3ee8b6-eebb-43c5-8c32-b332d5c4ad10")
                        },
                        new
                        {
                            ImageId = new Guid("8d229d96-112e-46b9-94f4-2175f7b41c07"),
                            ImageUrl = "/images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("ab3ee8b6-eebb-43c5-8c32-b332d5c4ad10")
                        },
                        new
                        {
                            ImageId = new Guid("c5f09e4c-90b1-4c48-a6a5-db44346b7a84"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("817a03d7-5550-4c8b-8afa-5d49aa47931b")
                        },
                        new
                        {
                            ImageId = new Guid("7251134e-c42c-44f2-8206-46b61ae19445"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("817a03d7-5550-4c8b-8afa-5d49aa47931b")
                        },
                        new
                        {
                            ImageId = new Guid("09537be1-6ce8-4cea-a165-3d6bcf286791"),
                            ImageUrl = "/images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("817a03d7-5550-4c8b-8afa-5d49aa47931b")
                        },
                        new
                        {
                            ImageId = new Guid("3a87e9b5-f203-40ba-8931-1ec2af1c0c55"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("cabe6b67-bb24-4c5e-b495-8b426cb4323b")
                        },
                        new
                        {
                            ImageId = new Guid("0fd799bb-e739-4fdb-be18-c1ce0770227b"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("cabe6b67-bb24-4c5e-b495-8b426cb4323b")
                        },
                        new
                        {
                            ImageId = new Guid("ae069fba-97f9-41f7-a366-e04ea69bd125"),
                            ImageUrl = "/images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("cabe6b67-bb24-4c5e-b495-8b426cb4323b")
                        },
                        new
                        {
                            ImageId = new Guid("6d4009e7-6240-43ce-82c6-0238bc133540"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("7a0e08e2-7ef6-45af-8c60-a9ee7688bbc1")
                        },
                        new
                        {
                            ImageId = new Guid("bc09697f-ead3-4075-a721-6c6672f348ab"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("7a0e08e2-7ef6-45af-8c60-a9ee7688bbc1")
                        },
                        new
                        {
                            ImageId = new Guid("0f625fe2-110d-4e64-8f0b-7730fd4c9e92"),
                            ImageUrl = "/images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("7a0e08e2-7ef6-45af-8c60-a9ee7688bbc1")
                        },
                        new
                        {
                            ImageId = new Guid("532ccf69-66a0-4269-9633-62e6b9101303"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("1c85b2f1-778c-4866-9b88-7324c9331381")
                        },
                        new
                        {
                            ImageId = new Guid("7a98d444-28d2-4eec-97fe-ed27ebd80ff2"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("1c85b2f1-778c-4866-9b88-7324c9331381")
                        },
                        new
                        {
                            ImageId = new Guid("6f4f95a2-9cb7-4192-b7a0-7fbaec194e03"),
                            ImageUrl = "/images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("1c85b2f1-778c-4866-9b88-7324c9331381")
                        },
                        new
                        {
                            ImageId = new Guid("2943f00d-f7bb-46b5-906a-c6eb69d62443"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-1.png",
                            ProductId = new Guid("7184e4a1-7ad8-4894-a37e-10c885eb1203")
                        },
                        new
                        {
                            ImageId = new Guid("6bcaa668-2c62-4321-93e2-bd9ef4ae1e7c"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-2.png",
                            ProductId = new Guid("7184e4a1-7ad8-4894-a37e-10c885eb1203")
                        },
                        new
                        {
                            ImageId = new Guid("c16d3d63-b328-451a-a6af-309a7b587857"),
                            ImageUrl = "/images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("7184e4a1-7ad8-4894-a37e-10c885eb1203")
                        },
                        new
                        {
                            ImageId = new Guid("13238791-cfaf-4bca-94f9-6c706f43cc40"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("8334bf0d-3c8f-4adf-970d-12a27ce0de6f")
                        },
                        new
                        {
                            ImageId = new Guid("70ddbb2b-02dd-43e3-92ff-6552233a5824"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("8334bf0d-3c8f-4adf-970d-12a27ce0de6f")
                        },
                        new
                        {
                            ImageId = new Guid("876930a1-4411-405b-b440-5fe88c977f16"),
                            ImageUrl = "/images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("8334bf0d-3c8f-4adf-970d-12a27ce0de6f")
                        },
                        new
                        {
                            ImageId = new Guid("3c07c5eb-702f-40e4-a531-f2900964bf91"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("2f761748-ec2f-4d80-b994-d16cf9198a3f")
                        },
                        new
                        {
                            ImageId = new Guid("aaeea6f4-9f68-4825-a0e2-41ec128d4d60"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("2f761748-ec2f-4d80-b994-d16cf9198a3f")
                        },
                        new
                        {
                            ImageId = new Guid("420c0a7a-3403-48c6-836d-ae18371491c9"),
                            ImageUrl = "/images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("2f761748-ec2f-4d80-b994-d16cf9198a3f")
                        },
                        new
                        {
                            ImageId = new Guid("fb25a841-b6f5-467d-910c-6b818290c2da"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-1.png",
                            ProductId = new Guid("6c1f0b6f-b5e6-4565-9f6f-e61983355a20")
                        },
                        new
                        {
                            ImageId = new Guid("bcf8391c-4b98-40b2-9899-63fef8adc3fb"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-2.png",
                            ProductId = new Guid("6c1f0b6f-b5e6-4565-9f6f-e61983355a20")
                        },
                        new
                        {
                            ImageId = new Guid("f3da87a4-450f-4330-ac01-eb5941237f2b"),
                            ImageUrl = "/images/Products/rdx-boxing-bag/rdx-boxing-bag-3.png",
                            ProductId = new Guid("6c1f0b6f-b5e6-4565-9f6f-e61983355a20")
                        },
                        new
                        {
                            ImageId = new Guid("993518ac-69f2-46c3-9423-2fc70cc66074"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("cac4733a-d4e6-4a20-8545-82d86cf2908f")
                        },
                        new
                        {
                            ImageId = new Guid("b1da83a7-f7a0-4537-8e76-f120628ff15d"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("cac4733a-d4e6-4a20-8545-82d86cf2908f")
                        },
                        new
                        {
                            ImageId = new Guid("e121333b-7b9f-4c88-b448-433f6220cf5b"),
                            ImageUrl = "/images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("cac4733a-d4e6-4a20-8545-82d86cf2908f")
                        },
                        new
                        {
                            ImageId = new Guid("1d2bdb9b-4801-475f-b478-dc16992006d6"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("9f583531-77c6-4df1-a26e-31ebce5ac44b")
                        },
                        new
                        {
                            ImageId = new Guid("119a7a85-a3d4-4826-9894-6e1dc71b759a"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("9f583531-77c6-4df1-a26e-31ebce5ac44b")
                        },
                        new
                        {
                            ImageId = new Guid("88c4e890-d621-4ae1-b452-e7d7211f5a20"),
                            ImageUrl = "/images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("9f583531-77c6-4df1-a26e-31ebce5ac44b")
                        },
                        new
                        {
                            ImageId = new Guid("2b4eddff-50fa-46cc-9c49-0f3a2c7559f2"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("14213bcd-4f55-4c5e-a358-149b27245252")
                        },
                        new
                        {
                            ImageId = new Guid("7f15566d-68be-49aa-a8e6-aa9c20bb2c62"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("14213bcd-4f55-4c5e-a358-149b27245252")
                        },
                        new
                        {
                            ImageId = new Guid("92e2cc2a-b609-4c25-9d5e-d2c0ecd5ef79"),
                            ImageUrl = "/images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("14213bcd-4f55-4c5e-a358-149b27245252")
                        },
                        new
                        {
                            ImageId = new Guid("dffca137-9877-431b-a52b-b8ab9cd410ef"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-1.png",
                            ProductId = new Guid("635480f0-b7dc-45f1-8d2f-1fd4e7c4a797")
                        },
                        new
                        {
                            ImageId = new Guid("4342daee-c990-4afb-9bf0-8b7bd5a15086"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-2.png",
                            ProductId = new Guid("635480f0-b7dc-45f1-8d2f-1fd4e7c4a797")
                        },
                        new
                        {
                            ImageId = new Guid("1631da05-82ae-4632-8d66-bd81c5e05d91"),
                            ImageUrl = "/images/Products/everlasr-pro-headgear/everlast-pro-headgear-3.png",
                            ProductId = new Guid("635480f0-b7dc-45f1-8d2f-1fd4e7c4a797")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
