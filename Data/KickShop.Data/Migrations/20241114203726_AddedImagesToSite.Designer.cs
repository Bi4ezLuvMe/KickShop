// <auto-generated />
using System;
using KickShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickShop.Migrations
{
    [DbContext(typeof(KickShopDbContext))]
    [Migration("20241114203726_AddedImagesToSite")]
    partial class AddedImagesToSite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KickShop.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Of The Brand");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Country Of Origin Of The The Brand");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Image Of The Brand");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Name Of The Brand");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Phone Number Of The Brand");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("7e0d725d-e9e6-4136-8fd1-f79cfffa22ed"),
                            Address = "123 Boxing Blvd, New York, NY",
                            Country = "USA",
                            ImageUrl = "images/Brands/everlast-logo.png",
                            IsDeleted = false,
                            Name = "Everlast",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            BrandId = new Guid("64ddd18e-cd26-456c-9cd4-f72ab8eee89b"),
                            Address = "456 Sports Ave, London, UK",
                            Country = "UK",
                            ImageUrl = "images/Brands/rdx-logo.png",
                            IsDeleted = false,
                            Name = "RDX",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("44905b25-dfa8-439f-80e0-734b058803a8"),
                            Address = "789 Fight St, Toronto, ON",
                            Country = "Canada",
                            ImageUrl = "images/Brands/hayabusa-logo.png",
                            IsDeleted = false,
                            Name = "Hayabusa",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            BrandId = new Guid("4943f970-d595-409f-b4cc-7cdb92ebe239"),
                            Address = "101 Martial Arts Way, Paris, FR",
                            Country = "France",
                            ImageUrl = "images/Brands/venum-logo.png",
                            IsDeleted = false,
                            Name = "Venum",
                            PhoneNumber = "321-654-0987"
                        },
                        new
                        {
                            BrandId = new Guid("396fb452-580c-4de5-91bd-967d51189adc"),
                            Address = "234 Fighter Rd, Bangkok, TH",
                            Country = "Thailand",
                            ImageUrl = "images/Brands/fairtex-logo.png",
                            IsDeleted = false,
                            Name = "Fairtex",
                            PhoneNumber = "876-543-2109"
                        },
                        new
                        {
                            BrandId = new Guid("474a58e5-5c30-4fc7-831d-e7ebcc4506ed"),
                            Address = "345 Punch Ln, Los Angeles, CA",
                            Country = "USA",
                            ImageUrl = "images/Brands/title-boxing-logo.png",
                            IsDeleted = false,
                            Name = "Title Boxing",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            BrandId = new Guid("47ae1e7a-7dbb-421e-b71a-9d5df4a2ef49"),
                            Address = "456 Ring Rd, Chicago, IL",
                            Country = "USA",
                            ImageUrl = "images/Brands/ringside-logo.png",
                            IsDeleted = false,
                            Name = "Ringside",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            BrandId = new Guid("74c4ccd1-cc4b-4361-a079-1a2990612fb6"),
                            Address = "567 Martial Arts Blvd, Oklahoma City, OK",
                            Country = "USA",
                            ImageUrl = "images/Brands/century-logo.png",
                            IsDeleted = false,
                            Name = "Century",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            BrandId = new Guid("317b0af4-eb65-4ac1-96cc-477c8586bad9"),
                            Address = "678 Fighter Ave, Miami, FL",
                            Country = "USA",
                            ImageUrl = "images/Brands/sanabul-logo.png",
                            IsDeleted = false,
                            Name = "Sanabul",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            BrandId = new Guid("949906da-e984-426d-964d-7b4d9ac0c2c2"),
                            Address = "789 Kick Rd, Phuket, TH",
                            Country = "Thailand",
                            ImageUrl = "images/Brands/twins-special-logo.png",
                            IsDeleted = false,
                            Name = "Twins Special",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Indentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The ShoppingCart Entity");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartsItems");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Image For The Category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name Of The Category");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("67311058-0822-44b1-9f9a-ec0683c5bc69"),
                            ImageUrl = "images/Categegories/boxing-gloves.png",
                            IsDeleted = false,
                            Name = "Gloves"
                        },
                        new
                        {
                            CategoryId = new Guid("f0d411a4-8557-413f-8111-2225a0bb9c17"),
                            ImageUrl = "images/Categories/clothing.png",
                            IsDeleted = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("aaa83208-c15f-4e32-aed9-380105e89d7c"),
                            ImageUrl = "images/Categories/shinguards.png",
                            IsDeleted = false,
                            Name = "Shinguards"
                        },
                        new
                        {
                            CategoryId = new Guid("dff5d80d-df91-4070-9502-dbf5597ea121"),
                            ImageUrl = "images/Categories/hand-wraps.png",
                            IsDeleted = false,
                            Name = "Hand Wraps"
                        },
                        new
                        {
                            CategoryId = new Guid("3b792e59-d2ad-42fe-80ec-26172985d772"),
                            ImageUrl = "images/Categories/head-gear.png",
                            IsDeleted = false,
                            Name = "Headgear"
                        },
                        new
                        {
                            CategoryId = new Guid("34369468-46a0-43ab-b5a5-ec1d4fe15574"),
                            ImageUrl = "images/Categories/mouth-guard.png",
                            IsDeleted = false,
                            Name = "Mouthguards"
                        },
                        new
                        {
                            CategoryId = new Guid("d43cf39a-b480-4195-82cf-cf536cee6baf"),
                            ImageUrl = "images/Categories/punching-bag.png",
                            IsDeleted = false,
                            Name = "Punching Bags"
                        },
                        new
                        {
                            CategoryId = new Guid("3ed9c652-85a1-4868-ac5a-454fe9f16897"),
                            ImageUrl = "images/Categories/training-equipment.png",
                            IsDeleted = false,
                            Name = "Training Equipment"
                        },
                        new
                        {
                            CategoryId = new Guid("32ebbcac-b51e-4796-b014-4ad7acfbd502"),
                            ImageUrl = "images/Categories/boxing-shoes.png",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = new Guid("71a2dcc6-0e39-4226-ae88-198be0d10f6b"),
                            ImageUrl = "images/Categories/protective-gear.png",
                            IsDeleted = false,
                            Name = "Protective Gear"
                        });
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Order Entity. Also Primary Key");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The ASP.NET User Entity. Also Primary Key");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersOrders");
                });

            modelBuilder.Entity("KickShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Order Was Placed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Total Amount Of The Order");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Brand Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Category Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The Description For The Product");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete Property");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("The Price Of The Product");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Size Of The Product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Current Stock Quantity");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("82e4510c-ce5e-433f-9f8a-e42211a25c74"),
                            BrandId = new Guid("64ddd18e-cd26-456c-9cd4-f72ab8eee89b"),
                            CategoryId = new Guid("67311058-0822-44b1-9f9a-ec0683c5bc69"),
                            Description = "High-quality leather gloves for all training levels.",
                            IsDeleted = false,
                            Name = "RDX Boxing Gloves",
                            Price = 49.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("fc0a05f4-0393-4539-b86c-d6c8dadc9cd9"),
                            BrandId = new Guid("44905b25-dfa8-439f-80e0-734b058803a8"),
                            CategoryId = new Guid("67311058-0822-44b1-9f9a-ec0683c5bc69"),
                            Description = "Top-notch gloves with exceptional durability.",
                            IsDeleted = false,
                            Name = "Hayabusa T3 Boxing Gloves",
                            Price = 89.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = new Guid("1f2feb1f-b587-4bd5-ad44-d94bd564b541"),
                            BrandId = new Guid("4943f970-d595-409f-b4cc-7cdb92ebe239"),
                            CategoryId = new Guid("67311058-0822-44b1-9f9a-ec0683c5bc69"),
                            Description = "Lightweight and designed for all skill levels.",
                            IsDeleted = false,
                            Name = "Venum Challenger Gloves",
                            Price = 39.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductId = new Guid("51105908-90d2-4150-8614-9be83d53e5f1"),
                            BrandId = new Guid("474a58e5-5c30-4fc7-831d-e7ebcc4506ed"),
                            CategoryId = new Guid("67311058-0822-44b1-9f9a-ec0683c5bc69"),
                            Description = "Durable leather gloves for heavy bag workouts.",
                            IsDeleted = false,
                            Name = "Title Boxing Leather Bag Gloves",
                            Price = 59.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductId = new Guid("cb608d00-541e-4eef-b14c-c0a70a9af200"),
                            BrandId = new Guid("74c4ccd1-cc4b-4361-a079-1a2990612fb6"),
                            CategoryId = new Guid("f0d411a4-8557-413f-8111-2225a0bb9c17"),
                            Description = "Comfortable shorts designed for kickboxing.",
                            IsDeleted = false,
                            Name = "Century Martial Arts Kickboxing Shorts",
                            Price = 29.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductId = new Guid("9105662e-fed0-42d4-8450-e394e1f9a81e"),
                            BrandId = new Guid("317b0af4-eb65-4ac1-96cc-477c8586bad9"),
                            CategoryId = new Guid("aaa83208-c15f-4e32-aed9-380105e89d7c"),
                            Description = "High-quality shin guards for protection and mobility.",
                            IsDeleted = false,
                            Name = "Sanabul Essential Shin Guards",
                            Price = 35.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("d324e2f2-e120-47c2-8f19-a65399b452bd"),
                            BrandId = new Guid("949906da-e984-426d-964d-7b4d9ac0c2c2"),
                            CategoryId = new Guid("3b792e59-d2ad-42fe-80ec-26172985d772"),
                            Description = "Full-face protection with Twins quality.",
                            IsDeleted = false,
                            Name = "Twins Special Headgear",
                            Price = 89.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = new Guid("dc42bcce-49dc-4aeb-9536-3596f996a060"),
                            BrandId = new Guid("7e0d725d-e9e6-4136-8fd1-f79cfffa22ed"),
                            CategoryId = new Guid("dff5d80d-df91-4070-9502-dbf5597ea121"),
                            Description = "Classic wraps for wrist and knuckle protection.",
                            IsDeleted = false,
                            Name = "Everlast Hand Wraps",
                            Price = 9.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("de946b6c-7fe7-44c6-b449-0c12c9e0e55d"),
                            BrandId = new Guid("47ae1e7a-7dbb-421e-b71a-9d5df4a2ef49"),
                            CategoryId = new Guid("d43cf39a-b480-4195-82cf-cf536cee6baf"),
                            Description = "Heavy-duty bag for all levels of training.",
                            IsDeleted = false,
                            Name = "Ringside Punching Bag",
                            Price = 119.99m,
                            Sizes = "[3]",
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = new Guid("15a4726d-e707-456d-bfc6-7477673011fd"),
                            BrandId = new Guid("64ddd18e-cd26-456c-9cd4-f72ab8eee89b"),
                            CategoryId = new Guid("32ebbcac-b51e-4796-b014-4ad7acfbd502"),
                            Description = "Lightweight and supportive for agility in the ring.",
                            IsDeleted = false,
                            Name = "RDX Pro Boxing Shoes",
                            Price = 69.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 65
                        },
                        new
                        {
                            ProductId = new Guid("bf4c9db9-efa6-4d4f-85ba-540f433972c6"),
                            BrandId = new Guid("4943f970-d595-409f-b4cc-7cdb92ebe239"),
                            CategoryId = new Guid("aaa83208-c15f-4e32-aed9-380105e89d7c"),
                            Description = "High-durability shin guards ideal for intense training.",
                            IsDeleted = false,
                            Name = "Venum Challenger Shin Guards",
                            Price = 45.99m,
                            Sizes = "[1,2,3]",
                            StockQuantity = 95
                        },
                        new
                        {
                            ProductId = new Guid("68f08706-037a-4729-9a1c-86f7ab333ce1"),
                            BrandId = new Guid("396fb452-580c-4de5-91bd-967d51189adc"),
                            CategoryId = new Guid("f0d411a4-8557-413f-8111-2225a0bb9c17"),
                            Description = "Premium Muay Thai shorts with authentic design.",
                            IsDeleted = false,
                            Name = "Fairtex Muay Thai Shorts",
                            Price = 34.99m,
                            Sizes = "[2,3,4]",
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductId = new Guid("cfd93849-a0ff-43ed-a926-d9ea4aeb5198"),
                            BrandId = new Guid("474a58e5-5c30-4fc7-831d-e7ebcc4506ed"),
                            CategoryId = new Guid("d43cf39a-b480-4195-82cf-cf536cee6baf"),
                            Description = "Perfect for accuracy and reflex training.",
                            IsDeleted = false,
                            Name = "Title Boxing Double End Bag",
                            Price = 44.99m,
                            Sizes = "[3]",
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = new Guid("823f6c84-6ee3-4e63-91a1-469624410af0"),
                            BrandId = new Guid("7e0d725d-e9e6-4136-8fd1-f79cfffa22ed"),
                            CategoryId = new Guid("3b792e59-d2ad-42fe-80ec-26172985d772"),
                            Description = "Full-protection headgear with durable padding.",
                            IsDeleted = false,
                            Name = "Everlast Pro Headgear",
                            Price = 69.99m,
                            Sizes = "[2,3]",
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign Key To The Customer Entity");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Date When The Shopping Cart Was Created");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Unique Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Url To The Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key To The Product Entity To Which The Picture Belongs");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("455033ff-9e87-44dc-939f-c234c54edead"),
                            ImageUrl = "images/Products/rdx-boxing-gloves/rdx-boxing-gloves-1.png",
                            ProductId = new Guid("82e4510c-ce5e-433f-9f8a-e42211a25c74")
                        },
                        new
                        {
                            ImageId = new Guid("dc4546ae-c3a1-413c-b92d-6e2e25a6cf4c"),
                            ImageUrl = "images/Products/rdx-boxing-gloves/rdx-boxing-gloves-2.png",
                            ProductId = new Guid("82e4510c-ce5e-433f-9f8a-e42211a25c74")
                        },
                        new
                        {
                            ImageId = new Guid("2f2fa14b-1c4a-42ca-96d7-0d81d0440682"),
                            ImageUrl = "images/Products/rdx-boxing-gloves/rdx-boxing-gloves-3.png",
                            ProductId = new Guid("82e4510c-ce5e-433f-9f8a-e42211a25c74")
                        },
                        new
                        {
                            ImageId = new Guid("e791330d-b61b-41f9-a079-aa870cc7c030"),
                            ImageUrl = "images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-1.png",
                            ProductId = new Guid("fc0a05f4-0393-4539-b86c-d6c8dadc9cd9")
                        },
                        new
                        {
                            ImageId = new Guid("489e5e66-9857-4a41-917b-bcc00902ae5b"),
                            ImageUrl = "images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-2.png",
                            ProductId = new Guid("fc0a05f4-0393-4539-b86c-d6c8dadc9cd9")
                        },
                        new
                        {
                            ImageId = new Guid("f17d65b1-c7cc-472c-a625-a023887790e1"),
                            ImageUrl = "images/Products/hayabusa-boxing-gloves/hayabusa-boxing-gloves-3.png",
                            ProductId = new Guid("fc0a05f4-0393-4539-b86c-d6c8dadc9cd9")
                        },
                        new
                        {
                            ImageId = new Guid("eea7b4ea-080b-4945-9824-2ed6dc170b42"),
                            ImageUrl = "images/Products/venum-challenger-gloves/venum-challenger-gloves-1.png",
                            ProductId = new Guid("1f2feb1f-b587-4bd5-ad44-d94bd564b541")
                        },
                        new
                        {
                            ImageId = new Guid("821fe652-fb3f-4b43-95d6-7f5be46abbaa"),
                            ImageUrl = "images/Products/venum-challenger-gloves/venum-challenger-gloves-2.png",
                            ProductId = new Guid("1f2feb1f-b587-4bd5-ad44-d94bd564b541")
                        },
                        new
                        {
                            ImageId = new Guid("8ab31026-db22-448a-82d1-96a96c9295b2"),
                            ImageUrl = "images/Products/venum-challenger-gloves/venum-challenger-gloves-3.png",
                            ProductId = new Guid("1f2feb1f-b587-4bd5-ad44-d94bd564b541")
                        },
                        new
                        {
                            ImageId = new Guid("c968348f-e559-4096-8a89-8f6ce078df09"),
                            ImageUrl = "images/Products/title-boxing-bag/title-boxing-bag-1.png",
                            ProductId = new Guid("51105908-90d2-4150-8614-9be83d53e5f1")
                        },
                        new
                        {
                            ImageId = new Guid("e74e1da8-c3ad-4113-8526-e1bac6deb92e"),
                            ImageUrl = "images/Products/title-boxing-bag/title-boxing-bag-2.png",
                            ProductId = new Guid("51105908-90d2-4150-8614-9be83d53e5f1")
                        },
                        new
                        {
                            ImageId = new Guid("5c6dec9a-f243-4499-b121-71351cf2913c"),
                            ImageUrl = "images/Products/title-boxing-bag/title-boxing-bag-3.png",
                            ProductId = new Guid("51105908-90d2-4150-8614-9be83d53e5f1")
                        },
                        new
                        {
                            ImageId = new Guid("f8d4ccc2-fb3b-446d-8ee5-b98957c04838"),
                            ImageUrl = "images/Products/century-kickboxing-shorts/century-kickboxing-shorts-1.png",
                            ProductId = new Guid("cb608d00-541e-4eef-b14c-c0a70a9af200")
                        },
                        new
                        {
                            ImageId = new Guid("ad5ae592-f9e9-435e-9d9c-acc87e8bd8ba"),
                            ImageUrl = "images/Products/century-kickboxing-shorts/century-kickboxing-shorts-2.png",
                            ProductId = new Guid("cb608d00-541e-4eef-b14c-c0a70a9af200")
                        },
                        new
                        {
                            ImageId = new Guid("e0960a87-142f-4aef-8bc0-3ed5997ff40e"),
                            ImageUrl = "images/Products/century-kickboxing-shorts/century-kickboxing-shorts-3.png",
                            ProductId = new Guid("cb608d00-541e-4eef-b14c-c0a70a9af200")
                        },
                        new
                        {
                            ImageId = new Guid("e8e0e62e-ec7a-4528-8ff4-f7a735330508"),
                            ImageUrl = "images/Products/sanabul-shin-guards/sanabul-shin-guards-1.png",
                            ProductId = new Guid("9105662e-fed0-42d4-8450-e394e1f9a81e")
                        },
                        new
                        {
                            ImageId = new Guid("57ccc5ac-2d38-420b-9cb2-e31c0dc56908"),
                            ImageUrl = "images/Products/sanabul-shin-guards/sanabul-shin-guards-2.png",
                            ProductId = new Guid("9105662e-fed0-42d4-8450-e394e1f9a81e")
                        },
                        new
                        {
                            ImageId = new Guid("7ca2bd05-ec2b-451a-b3db-236981ab23ce"),
                            ImageUrl = "images/Products/sanabul-shin-guards/sanabul-shin-guards-3.png",
                            ProductId = new Guid("9105662e-fed0-42d4-8450-e394e1f9a81e")
                        },
                        new
                        {
                            ImageId = new Guid("4f4c719f-2c88-4cd4-bc4b-d85351cf50e1"),
                            ImageUrl = "images/Products/twins-special-headgear/twins-shin-headgear-1.png",
                            ProductId = new Guid("d324e2f2-e120-47c2-8f19-a65399b452bd")
                        },
                        new
                        {
                            ImageId = new Guid("f19ebae5-8e65-4ad5-86fc-b9a7b00881c4"),
                            ImageUrl = "images/Products/twins-special-headgear/twins-shin-headgear-2.png",
                            ProductId = new Guid("d324e2f2-e120-47c2-8f19-a65399b452bd")
                        },
                        new
                        {
                            ImageId = new Guid("cab5c778-e751-4c2d-a388-e0b9778c4f7a"),
                            ImageUrl = "images/Products/twins-special-headgear/twins-shin-headgear-3.png",
                            ProductId = new Guid("d324e2f2-e120-47c2-8f19-a65399b452bd")
                        },
                        new
                        {
                            ImageId = new Guid("cd3aa934-4f99-4f33-ada2-a05c66697805"),
                            ImageUrl = "images/Products/everlast-hand-wraps/everlast-hand-wraps-1.png",
                            ProductId = new Guid("dc42bcce-49dc-4aeb-9536-3596f996a060")
                        },
                        new
                        {
                            ImageId = new Guid("f364f513-5e7e-4002-9e2e-f6d0491ced6a"),
                            ImageUrl = "images/Products/everlast-hand-wraps/everlast-hand-wraps-2.png",
                            ProductId = new Guid("dc42bcce-49dc-4aeb-9536-3596f996a060")
                        },
                        new
                        {
                            ImageId = new Guid("a75c702b-99ee-4d2a-bfb0-c4950ff07c82"),
                            ImageUrl = "images/Products/everlast-hand-wraps/everlast-hand-wraps-3.png",
                            ProductId = new Guid("dc42bcce-49dc-4aeb-9536-3596f996a060")
                        },
                        new
                        {
                            ImageId = new Guid("ca1b5789-87cf-4a8b-8fcf-9ea300c773b8"),
                            ImageUrl = "images/Products/ringside-punching-bag/ringside-punching-bag-1.png",
                            ProductId = new Guid("de946b6c-7fe7-44c6-b449-0c12c9e0e55d")
                        },
                        new
                        {
                            ImageId = new Guid("a8a43482-ecad-4372-9d7a-4b4428646b91"),
                            ImageUrl = "images/Products/ringside-punching-bag/ringside-punching-bag-2.png",
                            ProductId = new Guid("de946b6c-7fe7-44c6-b449-0c12c9e0e55d")
                        },
                        new
                        {
                            ImageId = new Guid("45c79e95-9bc4-4941-8c94-a7aba75cbed5"),
                            ImageUrl = "images/Products/ringside-punching-bag/ringside-punching-bag-3.png",
                            ProductId = new Guid("de946b6c-7fe7-44c6-b449-0c12c9e0e55d")
                        },
                        new
                        {
                            ImageId = new Guid("f3afdb52-2ac7-4364-83dd-d71174c5d0e8"),
                            ImageUrl = "images/Products/rdx-boxing-bag/rdx-boxing-bag-1.png",
                            ProductId = new Guid("15a4726d-e707-456d-bfc6-7477673011fd")
                        },
                        new
                        {
                            ImageId = new Guid("2c951c7e-3a28-4f82-a101-9c30a0a1691e"),
                            ImageUrl = "images/Products/rdx-boxing-bag/rdx-boxing-bag-2.png",
                            ProductId = new Guid("15a4726d-e707-456d-bfc6-7477673011fd")
                        },
                        new
                        {
                            ImageId = new Guid("8ad2f676-298a-48b8-9398-b64612076a41"),
                            ImageUrl = "images/Products/rdx-boxing-bag/rdx-boxing-bag-3.png",
                            ProductId = new Guid("15a4726d-e707-456d-bfc6-7477673011fd")
                        },
                        new
                        {
                            ImageId = new Guid("f0067cc7-1fc1-4c55-8974-cf23fd9dab0f"),
                            ImageUrl = "images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-1.png",
                            ProductId = new Guid("bf4c9db9-efa6-4d4f-85ba-540f433972c6")
                        },
                        new
                        {
                            ImageId = new Guid("c3f463f6-9936-4662-935f-e84816ff3184"),
                            ImageUrl = "images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-2.png",
                            ProductId = new Guid("bf4c9db9-efa6-4d4f-85ba-540f433972c6")
                        },
                        new
                        {
                            ImageId = new Guid("6eedf657-f7a8-4bf9-a9fe-f6a5ff25e1f7"),
                            ImageUrl = "images/Products/venum-challenger-shin-guards/venum-challenger-shin-guards-3.png",
                            ProductId = new Guid("bf4c9db9-efa6-4d4f-85ba-540f433972c6")
                        },
                        new
                        {
                            ImageId = new Guid("b7beb973-8f4a-4ea7-999e-fa8ffba826dd"),
                            ImageUrl = "images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-1.png",
                            ProductId = new Guid("68f08706-037a-4729-9a1c-86f7ab333ce1")
                        },
                        new
                        {
                            ImageId = new Guid("f3297299-f829-47bf-aba9-625ec8618d4e"),
                            ImageUrl = "images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-2.png",
                            ProductId = new Guid("68f08706-037a-4729-9a1c-86f7ab333ce1")
                        },
                        new
                        {
                            ImageId = new Guid("779d6d86-6f26-4b55-9a97-eb97783fba47"),
                            ImageUrl = "images/Products/fairtex-muay-thai-shorts/fairtex-muay-thai-shorts-3.png",
                            ProductId = new Guid("68f08706-037a-4729-9a1c-86f7ab333ce1")
                        },
                        new
                        {
                            ImageId = new Guid("6997be4e-929c-4c11-bacb-e4637c6cde66"),
                            ImageUrl = "images/Products/title-boxing-gloves/title-boxing-gloves-1.png",
                            ProductId = new Guid("cfd93849-a0ff-43ed-a926-d9ea4aeb5198")
                        },
                        new
                        {
                            ImageId = new Guid("b9203f3e-1947-4003-8120-07225e3bf31b"),
                            ImageUrl = "images/Products/title-boxing-gloves/title-boxing-gloves-2.png",
                            ProductId = new Guid("cfd93849-a0ff-43ed-a926-d9ea4aeb5198")
                        },
                        new
                        {
                            ImageId = new Guid("af092770-a867-4e57-8f4e-c4c919c49c5e"),
                            ImageUrl = "images/Products/title-boxing-gloves/title-boxing-gloves-3.png",
                            ProductId = new Guid("cfd93849-a0ff-43ed-a926-d9ea4aeb5198")
                        },
                        new
                        {
                            ImageId = new Guid("66b7a9b0-660e-446e-b69d-84e4d67b5976"),
                            ImageUrl = "images/Products/everlasr-pro-headgear/everlast-pro-headgear-1.png",
                            ProductId = new Guid("823f6c84-6ee3-4e63-91a1-469624410af0")
                        },
                        new
                        {
                            ImageId = new Guid("b5f124c1-fb3c-45e4-9bc7-0c1e65780328"),
                            ImageUrl = "images/Products/everlasr-pro-headgear/everlast-pro-headgear-2.png",
                            ProductId = new Guid("823f6c84-6ee3-4e63-91a1-469624410af0")
                        },
                        new
                        {
                            ImageId = new Guid("34659e02-9480-4180-bf82-4d79e2e4f493"),
                            ImageUrl = "images/Products/everlasr-pro-headgear/everlast-pro-headgear-3.png",
                            ProductId = new Guid("823f6c84-6ee3-4e63-91a1-469624410af0")
                        });
                });

            modelBuilder.Entity("KickShop.Models.CartItem", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KickShop.Models.CustomerOrder", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.HasOne("KickShop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("KickShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KickShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KickShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("KickShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
